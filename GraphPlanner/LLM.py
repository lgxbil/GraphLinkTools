from zhipuai import ZhipuAI
from prompt import *
import json
import re
from openai import OpenAI

qianwen_client = OpenAI(
    api_key="sk-f418d022aa7846eda995a61fef80bf85",
    base_url="https://dashscope.aliyuncs.com/compatible-mode/v1"
)

openai_client = OpenAI(
            base_url="base_url", 
            api_key="your_key"
            )
claude_client = OpenAI(
            base_url="base_url", 
            api_key="your_key"
            )
def LLM(query, model_name, max_tokens=8192, temp=0, n=1, stop=None, json = 0):
    if isinstance(query, list):
        messages = query
    else:
        messages = [{"role": "user","content": query}]
    
    payload = {
            "model": model_name,
            "messages": messages,
            'max_tokens': max_tokens,
            "temperature": temp,
            "n": n, 
            'stop': stop,
            "top_p": 0.95,
        }
    if json == 1:
        payload['response_format']={"type": "json_object"}
    if model_name.find("gpt") != -1:
        response = openai_client.chat.completions.create(
            **payload
            )

    elif model_name.find('claude') != -1:
        response = claude_client.chat.completions.create(**payload)
    
    elif model_name.find('qwen') != -1:
        response = qianwen_client.chat.completions.create(
            **payload # 模型列表：https://help.aliyun.com/zh/model-studio/getting-started/models
        )
    
    elif model_name.find('glm') != -1:
        client = ZhipuAI(api_key='your_api')
        response = client.chat.completions.create(
            model=model_name,
            messages=messages,
            stream=False,
            temperature=0,
            do_sample=False,
        )

    ## 在这里记录 token 消耗数
    # 输入 token
    input_token = response.usage.prompt_tokens
    # 输出 token
    output_token = response.usage.completion_tokens
    # 总 token
    used_token = response.usage.total_tokens

    return response.choices[0].message.content.strip()

def prase_json_from_response(rsp: str):
    pattern = r"```json(.*?)```"
    rsp_json = None
    try:
        match = re.search(pattern, rsp, re.DOTALL)
        if match is not None:
            try:
                rsp_json = json.loads(match.group(1).strip())
            except:
                pass
        else:
            rsp_json = json.loads(rsp)
        return rsp_json
    except json.JSONDecodeError as e:  # 因为太长解析不了
        try:
            match = re.search(r"\{(.*?)\}", rsp, re.DOTALL)
            if match:
                content = "[{" + match.group(1) + "}]"
                return json.loads(content)
        except:
            pass
        print(rsp)
        raise ("Json Decode Error: {error}".format(error=e))

if __name__ == '__main__':
    message = [{'role': 'system', 'content': '\nYou are a programming expert. Use Python to solve the problem described by the user. Based on the given tools and workflow, generate a complete Python code block (as a string) that can be directly executed in a Jupyter Notebook using InteractiveShell.instance().run_cell().\n\n#Code Style and Specification Requirements:\n1. Output the complete code as a Python string, ensuring it can be correctly executed by InteractiveShell.instance().run_cell(). \n\n2. Tool invocation standards: Tools should be invoked using function calls, for example: response = F.tool_name(params). Before each tool invocation, clearly define the parameters to be used, with variable names that clearly convey their meaning.\n\n3. Tool Response Exception Handling Standard:\nAfter each API call, it is required to check whether the request was successful. If not, an exception with the error message must be raised. \n\n4. Tool response handling standards: \n- When processing API responses, refer to the specified response_path in the workflow diagram and the response format in the API documentation to accurately extract the target fields. \n- For cases where no specific filtering method is specified, default to taking the first element at each level of the array. \n- If a filtering requirement is specified, filter according to the requirement to extract the optimal element. For example, the Search_Flights(departDate=2025-7-1, sort="FASTEST") API is already sorted by the fastest flights, so you can directly take the first flight from the results. \n- However, the Get_Room_Availability("hotel_id": "521") API may require filtering by price to extract the room with the lowest price.\n\n5. In the "code," try to avoid using the == operator and instead use the in operator.\n\n6. The tool\'s response format is {"status": False, "message": "xx", "data": "xx"}.When invoking the tool with response = F.tool_name(params), Use response[\'data\'] to access the response data.\n\n7. use print() to output the "key information" with explanatory text. If the subtask requires summarization or comparison, you can directly print the complete response.\n\n#Examples:\n\n(Example 1 starts)\n\nQuery:\nSearch for the fastest flight from Edinburgh to Lisbon on 2024-11-20. Obtain the flight arrival time, and provide data for the subsequent decision on whether the Edinburgh Castle tour can be joined on the same day.\nOutput:\n```python\n# Step 1: Get Edinburgh airport ID\nsearch_edinburgh_params = {\'query\': \'Edinburgh\'}\nedinburgh_location_response = F.Search_Flight_Location(search_edinburgh_params)\nfrom_id = edinburgh_location_response[\'data\'][0][\'id\']  # Get result from data field\n\n# Step 2: Get Lisbon airport ID\nsearch_lisbon_params = {\'query\': \'Lisbon\'}\nlisbon_location_response = F.Search_Flight_Location(search_lisbon_params)\nto_id = lisbon_location_response[\'data\'][0][\'id\']\n\n# Step 3: Search for the fastest flight\nsearch_flights_params = {\n    \'fromId\': from_id,\n    \'toId\': to_id,\n    \'departDate\': \'2024-11-20\',\n    \'sort\': \'FASTEST\'\n}\nflight_search_response = F.Search_Flights(search_flights_params)\n\n# Extract arrival time\nfastest_flight = flight_search_response[\'data\'][\'flightOffers\'][0]  # Note data is under \'data\' field\narrival_time = fastest_flight[\'segments\'][0][\'arrivalTime\']\n\n# Return final result\nprint(f"Fastest flight from Edinburgh to Lisbon on 2024-11-20 arrives at: {arrival_time}")\n```\n(Example 1 ends)\n\n(Example 2 starts)\nQuery:Retrieve the destination ID for Canberra and the categories filter for family rooms that allow pets. This subtask involves calling Search_Hotel_Destination to get the dest_id for Canberra and then using Get_Filter to retrieve the appropriate categories_filter.\nOutput\n```python\n# Step 1: Retrieve destination ID for Canberra\nsearch_destination_params = {\n    "query": "Canberra"\n}\ncanberra_destination_response = F.Search_Hotel_Destination(**search_destination_params)\n\n# Extract dest_id\ndest_id = canberra_destination_response[\'data\'][0][\'dest_id\']\n\n# Step 2: Call Get_Filter to retrieve filters\nget_filter_params = {\n    "dest_id": dest_id,\n    "search_type": "city",\n    "arrival_date": "2024-11-15",\n    "departure_date": "2024-11-22",\n    "adults": 2,\n    "children_age": "4,9",\n    "room_qty": 1,\n}\nfilter_response = F.Get_Filter(**get_filter_params)\n\n# Step 3: Extract genericIds for \'family\' and \'pet\' related options\nfamily_id = None\npet_id = None\nfor filt in filter_response[\'data\']["filters"]:\n    title = filt.get("title", "").lower()\n    for opt in filt.get("options", []):\n        option_title = opt.get("title", "").lower()\n        generic_id = opt.get("genericId")\n        if not generic_id:\n            continue\n        # Identify family rooms by \'family\' keyword\n        if "family" in option_title and family_id is None:\n            family_id = generic_id\n        # Identify pet-friendly rooms by \'pet\' keyword\n        if "pet" in option_title and pet_id is None:\n            pet_id = generic_id\n\nif family_id is None or pet_id is None:\n    raise Exception(f"Could not find both family_id and pet_id in filters: {json.dumps(filter_response, indent=2)}")\n\n# Combine into categories_filter string\ncategories_filter = f"{family_id},{pet_id}"\n\n# Final output\nprint(f"Destination ID for Canberra: {dest_id}")\nprint(f"Retrieved categories_filter for family & pet-friendly rooms: {categories_filter}")\n\n(Example 2 ends)  \n\n\n\n#Output Format\n```python\nimport necessary lib\n{code}\n```\n#Note:Follow the code style in the example.There is no need to define def functions.You can directly use the form result = F.tool_name(params) to invoke the tool.\n'}, {'role': 'assistant', 'content': 'Sure, I will generate the functions step-by-step and end up with `print` statement to show myself their execution results.'}, {'role': 'user', 'content': '\nRelateded APIs Information:\n[1] {\'name\': \'Search_Hotels\', \'endpoint\': \'/api/v1/hotels/searchHotels\', \'func_description\': \'Search Hotels. \', \'parameters\': {\'type\': \'object\', \'properties\': {\'dest_id\': {\'type\': \'Number\', \'description\': \'dest_id can be retrieved from api/v1/hotels/searchDestination(Search Hotel Destination) endpoint in Hotels collection.\', \'example_value\': \'-2092174\', \'required\': True}, \'search_type\': {\'type\': \'String\', \'description\': \'search_type can be retrieved from api/v1/hotels/searchDestination(Search Hotel Destination) endpoint in Hotels collection.\', \'example_value\': \'CITY\', \'required\': True}, \'arrival_date\': {\'type\': \'Date (yyyy-mm-dd)\', \'description\': \'The date on which you will arrive or check-in\', \'example_value\': \'\', \'required\': True}, \'departure_date\': {\'type\': \'Date (yyyy-mm-dd)\', \'description\': \'The date of departure or check-out.\', \'example_value\': \'\', \'required\': True}, \'adults\': {\'type\': \'Number\', \'description\': \'The number of guests who are 18 years of age or older. The default value is set to 1.\', \'example_value\': \'1\', \'required\': False}, \'children_age\': {\'type\': \'String\', \'description\': \'The number of children, including infants, who are under 18.\\nExample:\\nChild 1 Age = 8 months\\nChild 2 Age = 1 year\\nChild 3 Age = 17 years\\nHere is what the request parameter would look like:\\nchildren_age: 0,1,17\', \'example_value\': \'0,17\', \'required\': False}, \'room_qty\': {\'type\': \'Number\', \'description\': \'The number of rooms that are required. The default value is set to 1.\', \'example_value\': \'1\', \'required\': False}, \'page_number\': {\'type\': \'Number\', \'description\': \'The page number.\', \'example_value\': \'1\', \'required\': False}, \'price_min\': {\'type\': \'Number\', \'description\': \'Minimum Price filter for search.\', \'example_value\': \'\', \'required\': False}, \'price_max\': {\'type\': \'Number\', \'description\': \'Maximum Price filter for search.\', \'example_value\': \'\', \'required\': False}, \'sort_by\': {\'type\': \'String\', \'description\': \'sort_by can be retrieved from api/v1/hotels/getSortBy(Get Sort By) endpoint in Hotels collection.\', \'example_value\': \'\', \'required\': False}, \'categories_filter\': {\'type\': \'String\', \'description\': \'categories_filter can be retrieved from api/v1/hotels/getFilter(Get Filter) endpoint in Hotels collection.\', \'example_value\': \'\', \'required\': False}, \'units\': {\'type\': \'Enum\', \'description\': \'The measurement of distance in metric or imperial.\', \'example_value\': \'\', \'required\': False}, \'temperature_unit\': {\'type\': \'Enum\', \'description\': \'The temperature unit in Fahrenheit or Celsius.\\nc = Celsius\\nf = Fahrenheit\', \'example_value\': \'\', \'required\': False}, \'languagecode\': {\'type\': \'String\', \'description\': \'To obtain the response data in a specific language, enter the languagecode. languagecode can be retrieved from api/v1/meta/getLanguages(Get Languages\\n) endpoint in Meta collection.\', \'example_value\': \'en-us\', \'required\': False}, \'currency_code\': {\'type\': \'String\', \'description\': \'The currency code. currency_code can be retrieved from api/v1/meta/getCurrency(Get Currency) endpoint in Hotels collection.\', \'example_value\': \'AED\', \'required\': False}, \'location\': {\'type\': \'String\', \'description\': \'location can be retrieved from api/v1/meta/getLocations(Get Location) endpoint in Meta collection.\', \'example_value\': \'US\', \'required\': False}}, \'required\': [\'dest_id\', \'search_type\', \'arrival_date\', \'departure_date\']}, \'response_schema\': {\'hotels\': [{\'hotel_id\': 5163757, \'accessibilityLabel\': \'MEININGER Hotel Paris Porte de Vincennes.\\n7.9 Good 9197 reviews.\\n\\u200e12th arr.\\u202c • \\u200e4.7 km from centre\\u202c.\', \'property\': {\'longitude\': 2.413063, \'countryCode\': \'fr\', \'checkin\': {\'fromTime\': \'15:00\', \'untilTime\': \'00:00\'}, \'wishlistName\': \'Paris\', \'checkoutDate\': \'2024-12-25\', \'currency\': \'EUR\', \'checkinDate\': \'2024-12-20\', \'reviewCount\': 9197, \'latitude\': 48.844105, \'ufi\': -1456928, \'position\': 4, \'isPreferred\': True, \'reviewScore\': 7.9, \'name\': \'MEININGER Hotel Paris Porte de Vincennes\', \'qualityClass\': 0, \'accuratePropertyClass\': 0, \'isFirstPage\': True, \'rankingPosition\': 4, \'reviewScoreWord\': \'Good\', \'blockIds\': [\'516375704_179102182_0_2_0\'], \'checkout\': {\'untilTime\': \'11:00\', \'fromTime\': \'00:00\'}, \'optOutFromGalleryChanges\': 0, \'mainPhotoId\': 582215893, \'id\': 5163757, \'propertyClass\': 0, \'priceBreakdown\': {\'grossPrice\': {\'currency\': \'USD\', \'value\': 606.698250393747}}}}], \'meta\': [{\'title\': \'4741 properties\'}], \'appear\': [{\'accessibilityLabel\': \'B&B HOTEL Paris Porte de la Villette.\\n3 out of 5 stars.\\n6.7 Pleasant 669 reviews.\\n\\u200e19th arr.\\u202c • \\u200e6 k\', \'component\': {\'props\': {\'component\': {\'props\': {\'component\': {\'props\': {\'items\': [{\'props\': {\'component\': {\'props\': {\'items\': [{\'props\': {\'component\': {\'props\': {\'items\': [{\'props\': {\'alignment\': \'trailing\', \'text\': [{\'text\': \': 3\\xa0beds\', \'font\': \'body_2\'}]}}]}}}}]}}}}]}}}}}}}]}}\n[2] {\'name\': \'Search_Hotel_Destination\', \'endpoint\': \'/api/v1/hotels/searchDestination\', \'func_description\': "Find Hotels by their location, address, state, country, etc. This api\'s response contains the latitude and longitude for the search query. ", \'parameters\': {\'type\': \'object\', \'properties\': {\'query\': {\'type\': \'String\', \'description\': \'Names of locations, cities, districts, places, countries, counties etc.\', \'example_value\': \'man\', \'required\': True}}, \'required\': [\'query\']}, \'response_schema\': [{\'dest_id\': \'5977035\', \'search_type\': \'hotel\', \'nr_hotels\': 1, \'city_name\': \'Vlorë\', \'roundtrip\': \'GgEwIAQoATICZW46Ck1hcmluYSBCYXlAAEoAUAA=\', \'hotels\': 1, \'longitude\': 19.483181, \'lc\': \'en\', \'name\': \'Marina Bay Maritim Resort & Casino\', \'region\': \'Vlorë County\', \'label\': \'Marina Bay Maritim Resort & Casino, Vlorë, Vlorë County, Albania\', \'type\': \'ho\', \'latitude\': 40.4153, \'cc1\': \'al\', \'city_ufi\': -109054, \'dest_type\': \'hotel\', \'country\': \'Albania\'}]}\nQuery: \n{\'subtask_1\': {\'description\': \'This subtask involves finding the destination ID and search type for Paris using the Search_Hotel_Destination API. The obtained dest_id and search_type will be used in the next subtask to search for suitable hotels.\', \'Nodes\': [\'Search_Hotel_Destination(query = "Paris")\'], \'Edges\': [{\'from_api\': \'Search_Hotel_Destination\', \'response_path\': \'$[].dest_id\', \'target_param\': \'dest_id\', \'to_api\': \'Search_Hotels\'}, {\'from_api\': \'Search_Hotel_Destination\', \'response_path\': \'$[].search_type\', \'target_param\': \'search_type\', \'to_api\': \'Search_Hotels\'}]}, \'subtask_2\': {\'description\': \'This subtask involves using the dest_id and search_type obtained from the previous subtask to search for suitable hotels in Paris for the specified dates and group composition. The search will consider two adults and two children, aged seven and ten, staying from 2024-12-20 to 2024-12-25.\', \'Nodes\': [\'Search_Hotels(dest_id = "unknown(don\\\'t know the dest_id for Paris)", search_type = "unknown(don\\\'t know the search_type for Paris)", arrival_date = "2024-12-20", departure_date = "2024-12-25", adults = "2", children_age = "7,10")\'], \'Edges\': []}, \'question\': \'My friend and his family are planning a trip to Paris from 2024-12-20 to 2024-12-25. The group consists of two adults and two children, aged seven and ten. Could you suggest some suitable hotels for their stay?\'}\nOutput:\n'}, {'role': 'assistant', 'content': '\n# Step 1: Find the destination ID and search type for Paris\nsearch_destination_params = {\n    "query": "Paris"\n}\nparis_destination_response = F.Search_Hotel_Destination(**search_destination_params)\n\n# Extract dest_id and search_type\ndest_id = paris_destination_response[\'data\'][0][\'dest_id\']\nsearch_type = paris_destination_response[\'data\'][0][\'search_type\']\n\n# Step 2: Search for suitable hotels in Paris\nsearch_hotels_params = {\n    \'dest_id\': dest_id,\n    \'search_type\': search_type,\n    \'arrival_date\': \'2024-12-20\',\n    \'departure_date\': \'2024-12-25\',\n    \'adults\': 2,\n    \'children_age\': \'7,10\',\n    \'room_qty\': 1\n}\nhotels_search_response = F.Search_Hotels(**search_hotels_params)\n\n# Extract hotel details\nsuitable_hotels = hotels_search_response[\'data\'][\'hotels\']\n\n# Print the suggested hotels\nprint("Suggested hotels for your stay in Paris:")\nfor hotel in suitable_hotels:\n    hotel_name = hotel[\'name\']\n    review_score = hotel[\'reviewScore\']\n    review_count = hotel[\'reviewCount\']\n    price = hotel[\'priceBreakdown\'][\'grossPrice\'][\'value\']\n    currency = hotel[\'priceBreakdown\'][\'grossPrice\'][\'currency\']\n    print(f"Hotel: {hotel_name}, Review Score: {review_score} ({review_count} reviews), Price: {price} {currency}")\n'}, {'role': 'user', 'content': 'An error {\'error_message\': \'RuntimeError: [Mock API Failed] Search_Hotels - {\\\'error\\\': "Parameter dest_id of function Search_Hotels should be a number, but <class \\\'str\\\'> is provided."}\', \'traceback\': [{\'file\': \'<ipython-input-1-60da5e8f3aec>\', \'line_number\': 21, \'function\': \'<module>\', \'code\': \'hotels_search_response = F.Search_Hotels(**search_hotels_params)\'}]} occurred during code execution. The recommended improvement is:\n The error indicates that the `dest_id` parameter for the `Search_Hotels` API should be a number, but it is currently being passed as a string. You need to convert the `dest_id` value to an integer before passing it to the `Search_Hotels` API.\n\n**Suggested Correction:**\n- Convert the `dest_id` value to an integer when extracting it from the `paris_destination_response`.\n\n```python\n# Extract dest_id and search_type\ndest_id = int(paris_destination_response[\'data\'][0][\'dest_id\'])\nsearch_type = paris_destination_response[\'data\'][0][\'search_type\']\n```\n\nThis should resolve the error and allow the `Search_Hotels` API to execute correctly..\n1.Do not repeatedly call APIs that have already been successfully executed. You can reuse the previously successfully executed intermediate variables from previous successful executions in the Jupyter / Shell environment. These variables are still valid and available:\n [\'search_destination_params\', \'search_type\', \'paris_destination_response\', \'search_hotels_params\', \'dest_id\'].\n2.Do not write meaningless reassignments such as:from_id = from_id\nOnly rewrite from the point where the error occurred. Do not re-invoke the APIs that were executed successfully before. You can directly use the previously defined variables in new API calls.\n#Output Format:\n    ```python\n    import necessary lib\n    {code}\n    ```\n    #notes: Generated code must be directly executable via InteractiveShell.instance().run_cell(). All step annotations must use # comments. Avoid including non-essential commentary or summaries.\n                                '}, {'role': 'assistant', 'content': '\n# Convert dest_id to integer\ndest_id = int(dest_id)\n\n# Reuse the previously defined search_hotels_params with the corrected dest_id\nsearch_hotels_params = {\n    \'dest_id\': dest_id,\n    \'search_type\': search_type,\n    \'arrival_date\': \'2024-12-20\',\n    \'departure_date\': \'2024-12-25\',\n    \'adults\': 2,\n    \'children_age\': \'7,10\',\n    \'room_qty\': 1\n}\n\n# Search for suitable hotels in Paris\nhotels_search_response = F.Search_Hotels(**search_hotels_params)\n\n# Extract hotel details\nsuitable_hotels = hotels_search_response[\'data\'][\'hotels\']\n\n# Print the suggested hotels\nprint("Suggested hotels for your stay in Paris:")\nfor hotel in suitable_hotels:\n    hotel_name = hotel[\'name\']\n    review_score = hotel[\'reviewScore\']\n    review_count = hotel[\'reviewCount\']\n    price = hotel[\'priceBreakdown\'][\'grossPrice\'][\'value\']\n    currency = hotel[\'priceBreakdown\'][\'grossPrice\'][\'currency\']\n    print(f"Hotel: {hotel_name}, Review Score: {review_score} ({review_count} reviews), Price: {price} {currency}")\n'}, {'role': 'user', 'content': 'An error {\'error_message\': "KeyError: \'name\'", \'traceback\': [{\'file\': \'<ipython-input-2-818394d5728a>\', \'line_number\': 24, \'function\': \'<module>\', \'code\': "hotel_name = hotel[\'name\']"}]} occurred during code execution. The recommended improvement is:\n The error occurs because the key \'name\' does not exist in the hotel dictionary. According to the API response schema, the correct key for the hotel name is \'property.name\'. Here are the corrections:\n\n1. Update the key for extracting the hotel name to `hotel[\'property\'][\'name\']`.\n2. Ensure other keys are correctly accessed based on the response schema.\n\nCorrected suggestions:\n\n```python\n# Extract hotel details\nsuitable_hotels = hotels_search_response[\'data\'][\'hotels\']\n\n# Print the suggested hotels\nprint("Suggested hotels for your stay in Paris:")\nfor hotel in suitable_hotels:\n    hotel_name = hotel[\'property\'][\'name\']\n    review_score = hotel[\'reviewScore\']\n    review_count = hotel[\'reviewCount\']\n    price = hotel[\'priceBreakdown\'][\'grossPrice\'][\'value\']\n    currency = hotel[\'priceBreakdown\'][\'grossPrice\'][\'currency\']\n    print(f"Hotel: {hotel_name}, Review Score: {review_score} ({review_count} reviews), Price: {price} {currency}")\n```\n\nThis should resolve the KeyError and correctly display the hotel details..\n1.Do not repeatedly call APIs that have already been successfully executed. You can reuse the previously successfully executed intermediate variables from previous successful executions in the Jupyter / Shell environment. These variables are still valid and available:\n [\'search_destination_params\', \'search_type\', \'paris_destination_response\', \'search_hotels_params\', \'dest_id\', \'hotels_search_response\', \'suitable_hotels\', \'hotel\'].\n2.Do not write meaningless reassignments such as:from_id = from_id\nOnly rewrite from the point where the error occurred. Do not re-invoke the APIs that were executed successfully before. You can directly use the previously defined variables in new API calls.\n#Output Format:\n    ```python\n    import necessary lib\n    {code}\n    ```\n    #notes: Generated code must be directly executable via InteractiveShell.instance().run_cell(). All step annotations must use # comments. Avoid including non-essential commentary or summaries.\n                                '}, {'role': 'assistant', 'content': '\n# Extract hotel details\nsuitable_hotels = hotels_search_response[\'data\'][\'hotels\']\n\n# Print the suggested hotels\nprint("Suggested hotels for your stay in Paris:")\nfor hotel in suitable_hotels:\n    hotel_name = hotel[\'property\'][\'name\']\n    review_score = hotel[\'reviewScore\']\n    review_count = hotel[\'reviewCount\']\n    price = hotel[\'priceBreakdown\'][\'grossPrice\'][\'value\']\n    currency = hotel[\'priceBreakdown\'][\'grossPrice\'][\'currency\']\n    print(f"Hotel: {hotel_name}, Review Score: {review_score} ({review_count} reviews), Price: {price} {currency}")\n'}, {'role': 'user', 'content': 'An error {\'error_message\': "KeyError: \'reviewScore\'", \'traceback\': [{\'file\': \'<ipython-input-3-86aaba95f34e>\', \'line_number\': 8, \'function\': \'<module>\', \'code\': "review_score = hotel[\'reviewScore\']"}]} occurred during code execution. The recommended improvement is:\n The error occurs because the key \'reviewScore\' is not directly available in the hotel dictionary. According to the API response schema, \'reviewScore\' is nested under the \'property\' key. To fix this, update the code to access \'reviewScore\' correctly from the nested structure.\n\nSuggested correction:\n- Change `review_score = hotel[\'reviewScore\']` to `review_score = hotel[\'property\'][\'reviewScore\']`..\n1.Do not repeatedly call APIs that have already been successfully executed. You can reuse the previously successfully executed intermediate variables from previous successful executions in the Jupyter / Shell environment. These variables are still valid and available:\n [\'search_destination_params\', \'search_type\', \'paris_destination_response\', \'search_hotels_params\', \'dest_id\', \'hotels_search_response\', \'suitable_hotels\', \'hotel\'].\n2.Do not write meaningless reassignments such as:from_id = from_id\nOnly rewrite from the point where the error occurred. Do not re-invoke the APIs that were executed successfully before. You can directly use the previously defined variables in new API calls.\n#Output Format:\n    ```python\n    import necessary lib\n    {code}\n    ```\n    #notes: Generated code must be directly executable via InteractiveShell.instance().run_cell(). All step annotations must use # comments. Avoid including non-essential commentary or summaries.\n                                '}, {'role': 'assistant', 'content': '\n# Extract hotel details\nsuitable_hotels = hotels_search_response[\'data\'][\'hotels\']\n\n# Print the suggested hotels\nprint("Suggested hotels for your stay in Paris:")\nfor hotel in suitable_hotels:\n    hotel_name = hotel[\'property\'][\'name\']\n    review_score = hotel[\'property\'][\'reviewScore\']\n    review_count = hotel[\'property\'][\'reviewCount\']\n    price = hotel[\'priceBreakdown\'][\'grossPrice\'][\'value\']\n    currency = hotel[\'priceBreakdown\'][\'grossPrice\'][\'currency\']\n    print(f"Hotel: {hotel_name}, Review Score: {review_score} ({review_count} reviews), Price: {price} {currency}")\n'}, {'role': 'user', 'content': """The current bug has already been resolved by analyzing the response.
Here is the factual information extracted from the response:
 **Review Score:** 7.0 (5 reviews)\n   - **Price:** 579 USD\n\n2. **Hotel: Appartement Assomption paris**\n   - **Review Score:** 7.7 (4 reviews)\n   - **Price:** 597 USD\n\n3. **Hotel: Novotel Suites Paris Montreuil Vincennes**\n   - **Review Score:** 7.7 (6779 reviews)\n   - **Price:** 801 USD\n\n4. **Hotel: All Suites Appart & Hotel Paris 13 Porte d'Italie**\n   - **Review Score:** 7.5 (135 reviews)\n   - **Price:** 818 USD\n\n5. **Hotel: MEININGER Hotel Paris Porte de Vincennes**\n   - **Review Score:** 7.9 (9197 reviews)\n   - **Price:** 607 USD\n\nThese hotels have been selected based on their suitability for a family with two adults and two children, aged seven and ten..

Please perform one of the following actions based on this information:

If the facts are already sufficient to answer the user's question, directly print the useful result using print() — do not generate any further logic or code.

If you determine that additional API calls are still required, generate the necessary API invocation code accordingly.


```python
import necessary_lib
{code}
```
   
"""}]
    res = LLM(query=message, model_name="qwen2.5-72b-instruct")
    print(res)