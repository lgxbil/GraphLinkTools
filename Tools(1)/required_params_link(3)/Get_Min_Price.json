{
    "name": "Get_Min_Price",
    "docs_row": {
        "name": "Get_Min_Price",
        "endpoint": "/api/v1/flights/getMinPrice",
        "func_description": "Get the minimum price for flights. This API will return the lowest priced flights within 5 days before and after the query date. ",
        "parameters": {
            "type": "object",
            "properties": {
                "fromId": {
                    "type": "String",
                    "description": "From/Departure location Id. fromId can be retrieved from api/v1/flights/searchDestination(Search Flight Location) endpoint in Flights collection as id.",
                    "example_value": "BOM.AIRPORT",
                    "required": true
                },
                "toId": {
                    "type": "String",
                    "description": "To/Arrival location Id. toId can be retrieved from api/v1/flights/searchDestination(Search Flight Location) endpoint in Flights collection as id.",
                    "example_value": "DEL.AIRPORT",
                    "required": true
                },
                "departDate": {
                    "type": "Date (yyyy-mm-dd)",
                    "description": "Departure or travel date.\nFormat: YYYY-MM-DD",
                    "example_value": "",
                    "required": true
                },
                "returnDate": {
                    "type": "Date (yyyy-mm-dd)",
                    "description": "Return date.\nFormat: YYYY-MM-DD",
                    "example_value": "",
                    "required": false
                },
                "cabinClass": {
                    "type": "Enum",
                    "description": "Search for flights that match the cabin class specified. Cabin call can be either ECONOMY, PREMIUM_ECONOMY, BUSINESS or FIRST.",
                    "example_value": "",
                    "required": false
                },
                "currency_code": {
                    "type": "String",
                    "description": "The currency code. currency_code can be retrieved from api/v1/meta/getCurrency(Get Currency) endpoint in Hotels collection.",
                    "example_value": "AED",
                    "required": false
                }
            },
            "required": [
                "fromId",
                "toId",
                "departDate"
            ]
        }
    },
    "instance": [],
    "category": null,
    "tool": null,
    "api_idx": 36,
    "params": {
        "type": "object",
        "properties": {
            "fromId": {
                "type": "String",
                "description": "From/Departure location Id. fromId can be retrieved from api/v1/flights/searchDestination(Search Flight Location) endpoint in Flights collection as id.",
                "example_value": "BOM.AIRPORT",
                "required": true
            },
            "toId": {
                "type": "String",
                "description": "To/Arrival location Id. toId can be retrieved from api/v1/flights/searchDestination(Search Flight Location) endpoint in Flights collection as id.",
                "example_value": "DEL.AIRPORT",
                "required": true
            },
            "departDate": {
                "type": "Date (yyyy-mm-dd)",
                "description": "Departure or travel date.\nFormat: YYYY-MM-DD",
                "example_value": "",
                "required": true
            },
            "returnDate": {
                "type": "Date (yyyy-mm-dd)",
                "description": "Return date.\nFormat: YYYY-MM-DD",
                "example_value": "",
                "required": false
            },
            "cabinClass": {
                "type": "Enum",
                "description": "Search for flights that match the cabin class specified. Cabin call can be either ECONOMY, PREMIUM_ECONOMY, BUSINESS or FIRST.",
                "example_value": "",
                "required": false
            },
            "currency_code": {
                "type": "String",
                "description": "The currency code. currency_code can be retrieved from api/v1/meta/getCurrency(Get Currency) endpoint in Hotels collection.",
                "example_value": "AED",
                "required": false
            }
        },
        "required": [
            "fromId",
            "toId",
            "departDate"
        ]
    },
    "responses": [
        {
            "function_name": "Get_Min_Price",
            "arguments": {
                "fromId": "BOM.AIRPORT",
                "toId": "DEL.AIRPORT",
                "departDate": "2025-06-15"
            },
            "observation": [
                {
                    "departureDate": "2025-06-10",
                    "searchDates": [
                        "2025-06-10"
                    ],
                    "offsetDays": -5,
                    "accuracyTrackerId": "01kp0_kh0lPPIRVopJAx0O_YlYXDsel5E41QYsK-dW6uY4SiY3adyjQnJkK8uoJe",
                    "isCheapest": false,
                    "price": {
                        "currencyCode": "USD",
                        "units": 65,
                        "nanos": 180000000
                    },
                    "priceRounded": {
                        "currencyCode": "USD",
                        "units": 66,
                        "nanos": 0
                    }
                },
                {
                    "departureDate": "2025-06-11",
                    "searchDates": [
                        "2025-06-11"
                    ],
                    "offsetDays": -4,
                    "accuracyTrackerId": "01kp0_kh0lPPIRVopJAx0LTl6AUql_syfcTAMjzHiKKuY4SiY3adyjQnJkK8uoJe",
                    "isCheapest": true,
                    "price": {
                        "currencyCode": "USD",
                        "units": 64,
                        "nanos": 390000000
                    },
                    "priceRounded": {
                        "currencyCode": "USD",
                        "units": 65,
                        "nanos": 0
                    }
                },
                {
                    "departureDate": "2025-06-12",
                    "searchDates": [
                        "2025-06-12"
                    ],
                    "offsetDays": -3,
                    "accuracyTrackerId": "01kp0_kh0lPPIRVopJAx0EMXeqW1d8gR7JSJVlu2TZKuY4SiY3adyjQnJkK8uoJe",
                    "isCheapest": false,
                    "price": {
                        "currencyCode": "USD",
                        "units": 66,
                        "nanos": 540000000
                    },
                    "priceRounded": {
                        "currencyCode": "USD",
                        "units": 67,
                        "nanos": 0
                    }
                }
            ]
        },
        {
            "function_name": "Get_Min_Price",
            "arguments": {
                "fromId": "BOM.AIRPORT",
                "toId": "DEL.AIRPORT",
                "departDate": "2025-06-15",
                "cabinClass": "ECONOMY",
                "currency_code": "AED"
            },
            "observation": [
                {
                    "departureDate": "2025-06-10",
                    "searchDates": [
                        "2025-06-10"
                    ],
                    "offsetDays": -5,
                    "accuracyTrackerId": "01kp0_kh0lPPIRVopJAx0O_YlYXDsel5E41QYsK-dW6uY4SiY3adyjQnJkK8uoJe",
                    "isCheapest": false,
                    "price": {
                        "currencyCode": "AED",
                        "units": 239,
                        "nanos": 410000000
                    },
                    "priceRounded": {
                        "currencyCode": "AED",
                        "units": 242,
                        "nanos": 420000000
                    }
                },
                {
                    "departureDate": "2025-06-11",
                    "searchDates": [
                        "2025-06-11"
                    ],
                    "offsetDays": -4,
                    "accuracyTrackerId": "01kp0_kh0lPPIRVopJAx0LTl6AUql_syfcTAMjzHiKKuY4SiY3adyjQnJkK8uoJe",
                    "isCheapest": true,
                    "price": {
                        "currencyCode": "AED",
                        "units": 236,
                        "nanos": 500000000
                    },
                    "priceRounded": {
                        "currencyCode": "AED",
                        "units": 238,
                        "nanos": 750000000
                    }
                },
                {
                    "departureDate": "2025-06-12",
                    "searchDates": [
                        "2025-06-12"
                    ],
                    "offsetDays": -3,
                    "accuracyTrackerId": "01kp0_kh0lPPIRVopJAx0EMXeqW1d8gR7JSJVlu2TZKuY4SiY3adyjQnJkK8uoJe",
                    "isCheapest": false,
                    "price": {
                        "currencyCode": "AED",
                        "units": 244,
                        "nanos": 400000000
                    },
                    "priceRounded": {
                        "currencyCode": "AED",
                        "units": 246,
                        "nanos": 90000000
                    }
                }
            ]
        }
    ],
    "response_summary": "The API response provides flight pricing information for three different departure dates in June 2025. The cheapest option is available on June 11th, priced at $64.39 (rounded to $65). On June 10th, the flight costs $65.18 (rounded to $66), while June 12th is slightly more expensive at $66.54 (rounded to $67). Each date includes a unique tracking identifier for accuracy and shows how many days the search was conducted in advance of the departure date (ranging from 3 to 5 days prior). If you're looking for the best deal, June 11th stands out as the most economical choice.",
    "enhance_func_desc": "This API is ideal for travelers comparing flight prices for budget planning. It retrieves the minimum flight price between specified departure and arrival locations for given dates, with optional cabin class filtering. The response includes detailed pricing information, rounded costs, and tracking identifiers. Users can identify the most economical travel dates and plan accordingly. Location IDs must be obtained from the SearchDestination API.",
    "enhance_params_desc": {
        "enhanced_parameters": {
            "fromId": "Unique identifier for the departure airport/location.",
            "toId": "Unique identifier for the arrival airport/location.",
            "departDate": "Date of departure for the flight (YYYY-MM-DD format).",
            "returnDate": "Optional return date for round-trip flights (YYYY-MM-DD format).",
            "cabinClass": "Preferred flight class (ECONOMY, PREMIUM_ECONOMY, BUSINESS, FIRST).",
            "currency_code": "Currency for displaying flight prices (e.g., AED, USD)."
        }
    },
    "enhance_resfield_desc": {
        "response_fields": [
            {
                "departureDate": {
                    "type": "Date",
                    "description": "The date of the flight departure in YYYY-MM-DD format."
                },
                "searchDates": {
                    "type": "Array",
                    "description": "A list of dates when the search was conducted, formatted as YYYY-MM-DD.",
                    "ar_items": {
                        "type": "Date",
                        "description": "A specific search date."
                    }
                },
                "offsetDays": {
                    "type": "Number",
                    "description": "The number of days prior to the departure date when the search was conducted (e.g., -5 means 5 days before departure)."
                },
                "accuracyTrackerId": {
                    "type": "String",
                    "description": "A unique identifier used for tracking the accuracy of the flight pricing information."
                },
                "isCheapest": {
                    "type": "Boolean",
                    "description": "Indicates whether this flight option is the cheapest among the provided options."
                },
                "price": {
                    "type": "Object",
                    "description": "The exact price of the flight, including currency and breakdown into units and nanos.",
                    "ob_properties": {
                        "currencyCode": {
                            "type": "String",
                            "description": "The currency code for the price (e.g., 'USD')."
                        },
                        "units": {
                            "type": "Number",
                            "description": "The whole number part of the price (e.g., 65)."
                        },
                        "nanos": {
                            "type": "Number",
                            "description": "The fractional part of the price represented in nanoseconds (e.g., 180000000 for $0.18)."
                        }
                    }
                },
                "priceRounded": {
                    "type": "Object",
                    "description": "The rounded price of the flight, including currency and breakdown into units and nanos.",
                    "ob_properties": {
                        "currencyCode": {
                            "type": "String",
                            "description": "The currency code for the rounded price (e.g., 'USD')."
                        },
                        "units": {
                            "type": "Number",
                            "description": "The whole number part of the rounded price (e.g., 66)."
                        },
                        "nanos": {
                            "type": "Number",
                            "description": "The fractional part of the rounded price, typically 0 since it's rounded."
                        }
                    }
                }
            }
        ]
    },
    "params_desc_list": null,
    "response_desc_list": [
        {
            "path_name": "$[].departureDate",
            "name": "departureDate",
            "description": "The date of the flight departure in YYYY-MM-DD format."
        },
        {
            "path_name": "$[].searchDates",
            "name": "searchDates",
            "description": "A list of dates when the search was conducted, formatted as YYYY-MM-DD."
        },
        {
            "path_name": "$[].searchDates[]",
            "name": "searchDates[]",
            "description": "A specific search date."
        },
        {
            "path_name": "$[].offsetDays",
            "name": "offsetDays",
            "description": "The number of days prior to the departure date when the search was conducted (e.g., -5 means 5 days before departure)."
        },
        {
            "path_name": "$[].accuracyTrackerId",
            "name": "accuracyTrackerId",
            "description": "A unique identifier used for tracking the accuracy of the flight pricing information."
        },
        {
            "path_name": "$[].isCheapest",
            "name": "isCheapest",
            "description": "Indicates whether this flight option is the cheapest among the provided options."
        },
        {
            "path_name": "$[].price",
            "name": "price",
            "description": "The exact price of the flight, including currency and breakdown into units and nanos."
        },
        {
            "path_name": "$[].price.currencyCode",
            "name": "currencyCode",
            "description": "The currency code for the price (e.g., 'USD')."
        },
        {
            "path_name": "$[].price.units",
            "name": "units",
            "description": "The whole number part of the price (e.g., 65)."
        },
        {
            "path_name": "$[].price.nanos",
            "name": "nanos",
            "description": "The fractional part of the price represented in nanoseconds (e.g., 180000000 for $0.18)."
        },
        {
            "path_name": "$[].priceRounded",
            "name": "priceRounded",
            "description": "The rounded price of the flight, including currency and breakdown into units and nanos."
        },
        {
            "path_name": "$[].priceRounded.currencyCode",
            "name": "currencyCode",
            "description": "The currency code for the rounded price (e.g., 'USD')."
        },
        {
            "path_name": "$[].priceRounded.units",
            "name": "units",
            "description": "The whole number part of the rounded price (e.g., 66)."
        },
        {
            "path_name": "$[].priceRounded.nanos",
            "name": "nanos",
            "description": "The fractional part of the rounded price, typically 0 since it's rounded."
        }
    ],
    "depends_on": [
        {
            "target_api_params": "fromId",
            "reason": "The 'fromId' parameter in the target API requires a departure location ID, which can be retrieved from the source API's response field 'id'. The source API's response provides exact location IDs (e.g., 'JFK.AIRPORT') that match the required format and type for the target API. This is a direct prerequisite for calling the target API.",
            "source_jsonpath": "$[*].id",
            "confidence": 100,
            "dependency_relationship": "Hard Dependency(Prerequisite API)",
            "source_api": "Search_Flight_Location"
        },
        {
            "target_api_params": "fromId",
            "reason": "The 'fromId' parameter in the target API requires a departure location ID for flights, which is typically an airport code. The source API's 'pickupLocation' field in taxi journeys provides detailed location information including an 'airportCode' (e.g., 'BOM'). This creates a potential business association where a traveler might want to compare flight prices after booking a taxi to the airport.",
            "source_jsonpath": "$.journeys[*].pickupLocation.airportCode",
            "confidence": 85,
            "dependency_relationship": "Soft Dependency(Business-association)",
            "source_api": "Search_Taxi"
        },
        {
            "target_api_params": "fromId",
            "reason": "The 'fromId' parameter in the target API requires a departure location ID, which is the same as the 'fromId' parameter in the source API. Both APIs expect this ID to be retrieved from the SearchDestination API, indicating a direct match in requirements and data type.",
            "source_jsonpath": "$.flightOffers[*].segments[*].departureAirport.code",
            "confidence": 100,
            "dependency_relationship": "Hard Dependency(Prerequisite API)",
            "source_api": "Search_Flights"
        },
        {
            "target_api_params": "fromId",
            "reason": "The 'departureAirport' field in the source API response contains the airport code (e.g., 'BOM'), which matches the 'fromId' parameter's expected format and purpose. This field can directly serve as input for the target API's 'fromId' parameter.",
            "source_jsonpath": "$.flightOffers[*].segments[*].legs[*].departureAirport.code",
            "confidence": 100,
            "dependency_relationship": "Hard Dependency(Prerequisite API)",
            "source_api": "Search_Flights"
        },
        {
            "target_api_params": "fromId",
            "reason": "The 'fromId' parameter in the target API requires a departure location ID, which can be obtained from the source API's 'departureAirport.code' field in the segments. Both fields represent airport codes and have the same data type (String). This creates a hard dependency as the source API provides the necessary location ID required by the target API.",
            "source_jsonpath": "$.flightOffers[*].segments[*].departureAirport.code",
            "confidence": 100,
            "dependency_relationship": "Hard Dependency(Prerequisite API)",
            "source_api": "Search_Flights_Multi_Stops"
        },
        {
            "target_api_params": "toId",
            "reason": "The 'toId' parameter in the target API requires an arrival location ID, which can be retrieved from the source API's response fields. The source API's response includes 'id' fields (e.g., 'JFK.AIRPORT', 'EWR.AIRPORT') that exactly match the format and type required by the target API. This is a clear prerequisite for calling the target API, as the target API documentation explicitly states that 'toId' can be retrieved from this source API.",
            "source_jsonpath": "$[*].id",
            "confidence": 100,
            "dependency_relationship": "Hard Dependency(Prerequisite API)",
            "source_api": "Search_Flight_Location"
        },
        {
            "target_api_params": "toId",
            "reason": "The 'toId' parameter in the target API requires an arrival location ID for flights, which is typically an airport code. The source API's 'dropOffLocation' field provides location details including an 'airportCode' (e.g., 'BOM') when the drop-off is at an airport. This creates a potential business association where a traveler might want to check flight prices after arriving at an airport via taxi.",
            "source_jsonpath": "$.journeys[*].dropOffLocation.airportCode",
            "confidence": 85,
            "dependency_relationship": "Soft Dependency(Business-association)",
            "source_api": "Search_Taxi"
        },
        {
            "target_api_params": "toId",
            "reason": "The 'toId' parameter in the target API requires an arrival location ID for flights. The source API's 'arrivalAirport.code' field in flight segments provides the exact airport code (e.g., 'AMD') which matches the format and type required by the target API. This creates a direct mapping where the arrival airport from a multi-stop flight can be used to query minimum prices for that destination.",
            "source_jsonpath": "$.flightOffers[*].segments[*].arrivalAirport.code",
            "confidence": 100,
            "dependency_relationship": "Hard Dependency(Prerequisite API)",
            "source_api": "Search_Flights_Multi_Stops"
        },
        {
            "target_api_params": "toId",
            "reason": "The 'toId' parameter in the target API requires an arrival location ID for flights, which is typically an airport code. The source API's response includes 'iata_code' fields for airport locations (e.g., 'JFK'), which exactly match the format needed for flight location IDs. This creates a potential business association where a traveler might want to compare flight prices to a destination where they are also considering renting a car.",
            "source_jsonpath": "$[*].iata_code",
            "confidence": 95,
            "dependency_relationship": "Soft Dependency(Business-association)",
            "source_api": "Car_Auto-Complete"
        },
        {
            "target_api_params": "toId",
            "reason": "The 'toId' parameter in the target API requires an arrival location ID for flight searches. The source API's 'arrivalAirport.code' field in flight segments provides exact airport codes (e.g., 'DEL'). The data types match (both are Strings), and this is a direct mapping where the arrival airport code from a flight search can be used as the destination for price comparison.",
            "source_jsonpath": "$.flightOffers[*].segments[*].arrivalAirport.code",
            "confidence": 100,
            "dependency_relationship": "Hard Dependency(Prerequisite API)",
            "source_api": "Search_Flights"
        },
        {
            "target_api_params": "departDate",
            "reason": "The 'departDate' parameter in the target API requires a departure date in 'yyyy-mm-dd' format. The source API's 'departureDate' field provides exactly this format (e.g., '2025-05-21'). This is a direct match in both data type and format, making it suitable for use as input for the target API's 'departDate' parameter.",
            "source_jsonpath": "$[*].departureDate",
            "confidence": 100,
            "dependency_relationship": "Hard Dependency(Prerequisite API)",
            "source_api": "Get_Min_Price_Multi_Stops"
        },
        {
            "target_api_params": "departDate",
            "reason": "The 'departDate' parameter in the target API requires a departure date in 'yyyy-mm-dd' format. The source API's 'departure_date' field provides exactly this format (e.g., '2025-06-15'). This creates a potential business association where a traveler might want to check flight prices for the same date they are checking out of a hotel.",
            "source_jsonpath": "$.departure_date",
            "confidence": 95,
            "dependency_relationship": "Soft Dependency(Business-association)",
            "source_api": "Get_Room_List"
        },
        {
            "target_api_params": "departDate",
            "reason": "The 'departDate' parameter in the target API requires a departure date in 'yyyy-mm-dd' format. The source API's 'departureTime' field in flight segments provides exact departure timestamps (e.g., '2025-05-25T01:00:00'). The date portion can be extracted to match the required format. This creates a potential business association where a traveler wants to check the minimum price for a flight on the same departure date.",
            "source_jsonpath": "$.flightOffers[*].segments[*].departureTime",
            "confidence": 95,
            "dependency_relationship": "Soft Dependency(Business-association)",
            "source_api": "Search_Flights_Multi_Stops"
        },
        {
            "target_api_params": "departDate",
            "reason": "The 'departDate' parameter in the target API requires a specific departure date in 'yyyy-mm-dd' format. The source API's 'departureTime' field in flight segments provides exact departure timestamps (e.g., '2025-06-15T06:00:00'). The date portion can be extracted from this timestamp to match the required format. This creates a potential business association where a traveler wants to check the minimum price for the same departure date.",
            "source_jsonpath": "$.flightOffers[*].segments[*].departureTime",
            "confidence": 95,
            "dependency_relationship": "Soft Dependency(Business-association)",
            "source_api": "Search_Flights"
        },
        {
            "target_api_params": "departDate",
            "reason": "The 'departDate' parameter in the target API requires a specific departure date for flights (yyyy-mm-dd format). The source API's 'date' field in 'avDates[*]' provides specific dates (e.g., '2025-06-10') which match the required format. This creates a potential business association where a traveler might want to check flight prices for dates when hotel rooms are available at a certain price.",
            "source_jsonpath": "$.avDates[*].date",
            "confidence": 85,
            "dependency_relationship": "Soft Dependency(Business-association)",
            "source_api": "Get_Room_Availability"
        },
        {
            "target_api_params": "departDate",
            "reason": "The 'departDate' parameter in the target API requires a departure date in 'yyyy-mm-dd' format for flight searches. The source API's 'requestedPickupDateTime' field in taxi journeys provides a timestamp (e.g., '2025-06-15T14:30:00') which includes the date portion. While the data types differ (timestamp vs date), the date portion can be extracted. This creates a potential business association where a traveler might want to check flight prices for the same date they have booked a taxi.",
            "source_jsonpath": "$.journeys[*].requestedPickupDateTime",
            "confidence": 85,
            "dependency_relationship": "Soft Dependency(Business-association)",
            "source_api": "Search_Taxi"
        },
        {
            "target_api_params": "departDate",
            "reason": "The 'departDate' parameter in the target API requires a departure date in the format 'YYYY-MM-DD'. The source API's 'start' field in the time slots provides a timestamp (e.g., '2025-05-25T19:00:00+05:30') which includes the date in the required format. This creates a potential business association where a traveler might want to check flight prices for the same date they plan to attend an attraction.",
            "source_jsonpath": "$[*].start",
            "confidence": 85,
            "dependency_relationship": "Soft Dependency(Business-association)",
            "source_api": "Get_Availability"
        }
    ],
    "verified": true
}