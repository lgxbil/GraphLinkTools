2025-06-13 19:22:11,360 - logger_Get_Seat_Map - INFO - Get_Seat_Map
2025-06-13 19:22:11,360 - logger_Get_Seat_Map - INFO - offerToken:Unique token identifying a flight offer, obtained from flight search endpoints.
2025-06-13 19:22:11,370 - logger_Get_Seat_Map - INFO - retrival:[{'Search_Flights_Multi_Stops': '$.flightDeals[].offerToken: A unique token representing the flight offer, typically used for booking or further queries.'}, {'Search_Flights': '$.flightDeals[].offerToken: A token representing the flight offer, used for booking or further queries.'}, {'Search_Flights': '$.flightOffers[].token: A unique token representing the flight search session or results, likely used for subsequent API calls or session tracking.'}, {'Search_Flights_Multi_Stops': '$.flightOffers[].token: A unique token representing the session or query for the flight search results. It may be used for subsequent API calls to retrieve or modify the search results.'}, {'Search_Flights_Multi_Stops': "$.flightOffers[].offerKeyToHighlight: A unique identifier for a specific flight offer that may be highlighted in the search results (e.g., '1_6E911_2_6E6351.BOM20250525.AMD20250528')."}, {'Search_Flights': "$.flightDeals[].key: A unique identifier for the flight offer category (e.g., 'CHEAPEST')."}, {'Search_Flights': "$.flightOffers[].offerKeyToHighlight: A unique identifier for a specific flight offer that may be highlighted or recommended (e.g., '1_6E762.BOM20250615')."}, {'Search_Flights_Multi_Stops': "$.searchId: A unique identifier for the flight search session (e.g., '99527EA1799731DFBC5DCC0D3A95CE8B')."}, {'Search_Flights': "$.searchId: A unique identifier for the flight search session (e.g., '18AD19EE6C7237C08953DC22C43CB5AE')."}, {'Search_Flights_Multi_Stops': "$.flightDeals[].key: A label indicating the type of flight offer (e.g., 'CHEAPEST')."}, {'Search_Flights': '$.aggregation.airlines: A list of airlines offering flights for the given route.'}, {'Search_Flights': "$.flightOffers[].posMismatch.offerSalesCountry: The country code where the flight offers are being sold (e.g., 'us' for the United States)."}, {'Get_Min_Price_Multi_Stops': '$[].accuracyTrackerId: A unique identifier used for tracking the accuracy of the flight search results.'}, {'Get_Min_Price': '$[].accuracyTrackerId: A unique identifier used for tracking the accuracy of the flight pricing information.'}, {'Search_Flights': '$.flightDeals[].price: The total price of the flight offer, broken down into currency and amount.'}, {'Get_Availability': "$[].timeSlotOffers[].items[].offerItemId: An identifier for the offer item (e.g., 'OI5K8mlrnLPy')."}, {'Get_Availability': "$[].timeSlotOffers[].items[].id: A unique identifier for the offer item (e.g., 'ATO-e90b3d37-72e8-4b12-86e5-9c006d325a12_PRg6H2LJ9JFX_20250525_1900')."}, {'Search_Attractions': '$.products[].offers[]: An object representing a single offer.'}, {'Search_Flights_Multi_Stops': '$.flightDeals[].price: The exact price of the flight offer, including currency and breakdown into units and nanos for precision.'}, {'Search_Flights_Multi_Stops': '$.flightOffers[].appliedDiscounts: An array that may contain any discounts applied to the flight search results. Currently empty in the provided response.'}, {'Get_Availability': "$[].timeSlotOffers[].id: A unique identifier for the offer (e.g., 'OFfiWXve5anX')."}, {'Search_Flights': '$.aggregation.airlines[].count: The number of flights offered by this airline.'}, {'Search_Flights': '$.flightOffers[].segments[].legs[].flightInfo: Details about the flight, including facilities, flight number, and carrier information.'}, {'Get_Min_Price_Multi_Stops': '$[].searchDates: A list of dates relevant to the flight search, formatted as YYYY-MM-DD.'}, {'Get_Min_Price_Multi_Stops': '$[].price: The exact price of the flight, broken down into currency and subunits.'}, {'Get_Min_Price': '$[].price: The exact price of the flight, including currency and breakdown into units and nanos.'}, {'Search_Flights_Multi_Stops': '$.aggregation.airlines: A list of airlines operating the flights with details on count and pricing.'}, {'Search_Flights': '$.aggregation.airlines[]: An object representing details of a specific airline.'}, {'Search_Flights_Multi_Stops': '$.aggregation.airlines[]: An object representing airline details.'}, {'Search_Flights': "$.flightOffers[].pointOfSale: The point of sale or market for which the flight search results are tailored (e.g., 'us' for the United States)."}, {'Search_Flights_Multi_Stops': '$.flightOffers[].offerExtras.flexibleTicket: An object containing details about flexible ticket options for flights.'}, {'Search_Attractions': '$.products[].offers[].items[].id: A unique identifier for the offer item.'}, {'Search_Flights_Multi_Stops': '$.displayOptions.brandedFaresShownByDefault: Indicates whether branded fares are shown by default in the flight search results.'}, {'Search_Flights_Multi_Stops': '$.flightOffers[].unifiedPriceBreakdown.price: The total price of the flight, including currency details and breakdown of units and nanos for precise decimal representation.'}, {'Search_Flights': '$.flightDeals[].priceRounded: The rounded total price of the flight offer, for display purposes.'}, {'Search_Flights': '$.flightOffers[].unifiedPriceBreakdown.price: The total price of the flight, including currency details and breakdown.'}, {'Search_Flights_Multi_Stops': '$.aggregation.totalCount: The total number of flight options available (e.g., 925).'}, {'Search_Flights': "$.flightOffers[].unifiedPriceBreakdown.items[].items[].id: A unique identifier for the sub-item (e.g., 'flight_adult-basefare')."}, {'Search_Flights_Multi_Stops': "$.flightOffers[].unifiedPriceBreakdown.items[].items[].id: A unique identifier for the sub-item (e.g., 'flight_adult-basefare')."}, {'Search_Flights': "$.aggregation.airlines[].name: The name of the airline (e.g., 'Air India')."}, {'Search_Flights': '$.flightOffers[].segments[].legs[].flightInfo.flightNumber: The flight number (e.g., 762).'}, {'Search_Flights_Multi_Stops': '$.flightDeals[].priceRounded: The rounded price of the flight offer for display purposes.'}, {'Search_Flights_Multi_Stops': '$.flightOffers[].ancillaries.flexibleTicket: An object containing details about a flexible ticket option for flights.'}, {'Search_Flights': "$.baggagePolicies[].name: The full name of the airline (e.g., 'Air India')."}, {'Search_Flights_Multi_Stops': "$.flightOffers[].pointOfSale: The point of sale or market where the flight search was conducted (e.g., 'us' for the United States)."}, {'Search_Flights': '$.flightOffers[].appliedDiscounts: An empty array indicating no discounts were applied to the flight search results.'}, {'Search_Flights': '$.flightOffers[].priceBreakdown.discount: Discount applied to the flight.'}, {'Search_Flights': '$.flightOffers[].ancillaries.flexibleTicket: Details about the flexible ticket option available for flights.'}, {'Search_Flights': '$.flightOffers[].offerExtras.flexibleTicket: Details about the flexible ticket option available for flights.'}, {'Search_Flights_Multi_Stops': '$.flightOffers[].priceBreakdown.discount: The discount applied to the flight price.'}, {'Search_Flights_Multi_Stops': '$.displayOptions.hideFlexiblePricesBanner: Indicates whether the flexible prices banner is hidden in the flight search results.'}, {'Search_Flights_Multi_Stops': "$.flightOffers[].segments[].legs[].flightInfo.carrierInfo.marketingCarrier: The IATA code of the marketing carrier (e.g., '6E')."}, {'Search_Flights': "$.flightOffers[].segments[].legs[].flightInfo.carrierInfo.marketingCarrier: The IATA code of the marketing carrier (e.g., '6E')."}, {'Search_Flights_Multi_Stops': "$.flightOffers[].unifiedPriceBreakdown.items[].items[].title: A human-readable title for the sub-item (e.g., 'Flight fare')."}, {'Search_Flights_Multi_Stops': '$.aggregation.stops: A list of flight stop options with details on count and pricing.'}, {'Search_Flights_Multi_Stops': '$.flightOffers[].segments[].legs[].flightInfo: Details about the flight for the leg.'}, {'Search_Flights_Multi_Stops': '$.priceAlertStatus.isSearchEligible: Indicates whether the search criteria are eligible for returning flight results (false in this case).'}, {'Search_Flights_Multi_Stops': "$.baggagePolicies[].code: The airline code (e.g., '6E' for IndiGo)."}, {'Search_Flights_Multi_Stops': "$.baggagePolicies[].name: The full name of the airline (e.g., 'IndiGo')."}, {'Search_Flights': "$.flightOffers[].unifiedPriceBreakdown.items[].items[].title: The display name of the sub-item (e.g., 'Flight fare')."}, {'Search_Flights': "$.flightOffers[].priceBreakdown.carrierTaxBreakdown[].carrier.logo: The URL of the airline carrier's logo."}, {'Search_Flights_Multi_Stops': "$.aggregation.airlines[].logoUrl: The URL of the airline's logo."}, {'Search_Flights': "$.aggregation.airlines[].logoUrl: The URL of the airline's logo."}, {'Search_Flights_Multi_Stops': '$.flightOffers[].priceBreakdown.baseFare: The base fare price of the flight, excluding fees and taxes.'}, {'Search_Flights_Multi_Stops': "$.aggregation.airlines[].name: The name of the airline (e.g., 'IndiGo')."}, {'Get_Min_Price_Multi_Stops': '$[].priceRounded: The rounded price of the flight, for display purposes.'}, {'Search_Flights': '$.aggregation.stops[].count: The number of flights available in this stop category.'}, {'Search_Flights': "$.baggagePolicies[].code: The airline code (e.g., 'AI' for Air India)."}, {'Search_Flights': "$.aggregation.airlines[].iataCode: The IATA code of the airline (e.g., 'AI')."}, {'Search_Flights_Multi_Stops': '$.aggregation.filteredTotalCount: The total number of flight options after applying filters (e.g., 925).'}]
2025-06-13 19:22:11,997 - logger_Get_Seat_Map - INFO - res_dict:
{'Search_Flights_Multi_Stops': {'$.searchId', '$.flightOffers[]', '$.displayOptions', '$.baggagePolicies[]', '$.aggregation', '$.priceAlertStatus', '$.flightDeals[]'}, 'Search_Flights': {'$.searchId', '$.flightOffers[]', '$.baggagePolicies[]', '$.aggregation', '$.flightDeals[]'}, 'Get_Min_Price_Multi_Stops': {'$[]'}, 'Get_Min_Price': {'$[]'}, 'Get_Availability': {'$[].timeSlotOffers[]'}, 'Search_Attractions': {'$.products[].offers[]'}}
2025-06-13 19:22:12,038 - logger_Get_Seat_Map - INFO - messages
:[{"role": "system", "content": "\n#ROLE:\nYou are a professional API Dependency Evaluator. Your task is to analyze whether response fields from source APIs can serve as valid input parameters for a target API.\n\n#INPUT:\n1. Target API Documentation\n2. Target Parameters Of Target API(One input parameter you need to focus on)\n3. Source API Documentation\n4. List of most likely Source API Resopnse Fields\n\n#RULES:\n1. Carefully read the target API documentation to clearly understand the input parameter requirements of the target API, especially the parameter being focused on.\n2. Analyze the response fields of the source API to determine whether there is a business association with the target API parameter(Soft Dependence) or If it is a necessary prerequisite for calling the target API(Hard Dependence).The departure time of the flight is often related to the car rental drop-off time, while the arrival time of the flight is typically associated with the car rental pick-up time.\n3. Based on the context of the source API's response example, determine which specific field of the source API can be used as input for the target parameters of target api.\n4. Pay attention to whether the data type of the API's response field matches the data type of the target API's parameter.However, sometimes even though the data types do not match exactly, the response field of the source API may contain the information required by the target API parameter. For example, a field with the format \"yyy-mm-dd Hh-Mm\" may include the value needed for the pickUpTime parameter (which expects the format \"24-Hour Hh:Mm\"). In such cases, it is important to carefully examine the example values from the response fields to determine if they can be appropriately adapted or extracted for use as input parameters.\n\n#OUTPUT:\n1. Provide a confidence score between 0-100 for each judgment. If the confidence is below 80, set the dependency relationship to null.\n2. Provide reasons. The reasons should first analyze the meanings of the fields and parameters, determine whether the types match, and consider whether there are reasonable scenarios where the output field of the source API could serve as the input parameter of the target API, paying attention to the causal sequence. If no, reasons are given.\n\n\n#Example:\n\nExample1:\nTarget API Documentation:\n{\n\"name\": \"Car_Search\",\n\"func_description\": \"This API is ideal for travelers seeking car rentals at specific locations and times. It searches available vehicles based on pickup/drop-off details, with options to filter by car type, supplier, transmission, and amenities like air conditioning. Users receive detailed rental info including pricing, capacity, features, and supplier ratings. Results can be sorted by recommendation or price, aiding in cost-effective travel planning.\",\n\"parameters\": {\n    \"type\": \"object\",\n    \"properties\": {\n        \"pickUpId\": {\n            \"type\": \"String\",\n            \"description\": \"Pick-up location\nRequired: true\npickUpId can be retrieved from /car/auto-complete endpoint(data->id)\n\",\n            \"example_value\": \"eyJsYXRpdHVkZSI6IjQwLjc1OTU5IiwibG9uZ2l0dWRlIjoiLTczLjk4NDkxIn0=\",\n            \"required\": true\n        },\n        \"pickUpDate\": {\n            \"type\": \"Date (yyyy-mm-dd)\",\n            \"description\": \"Pick-up date\nRequired: true\nFormat: YYYY-MM-DD\nEx: 2024-01-25\",\n            \"example_value\": \"\",\n            \"required\": true\n        },\n        \"pickUpTime\": {\n            \"type\": \"Time (24-Hour Hh:Mm)\",\n            \"description\": \"Pick-up time\nRequired: true\nFormat: HH:MM\nEx: 10:00\",\n            \"example_value\": \"\",\n            \"required\": true\n        },\n        \"dropOffDate\": {\n            \"type\": \"Date (yyyy-mm-dd)\",\n            \"description\": \"Drop-off date\nRequired: true\nFormat: YYYY-MM-DD\nEx: 2024-01-26\",\n            \"example_value\": \"\",\n            \"required\": true\n        },\n        \"dropOffTime\": {\n            \"type\": \"Time (24-Hour Hh:Mm)\",\n            \"description\": \"Drop-off time\nRequired: true\nFormat: HH:MM\nEx: 10:00\",\n            \"example_value\": \"\",\n            \"required\": true\n        },\n    },\n    \"required\": [\n        \"pickUpId\",\n        \"pickUpDate\",\n        \"pickUpTime\",\n        \"dropOffDate\",\n        \"dropOffTime\"\n    ]\n}\nTarget Parameters Of Target API:\n\"pickUpTime\": {\n    \"type\": \"Time (24-Hour Hh:Mm)\",\n    \"description\": \"Pick-up time\nRequired: true\nFormat: HH:MM\nEx: 10:00\",\n    \"example_value\": \"\",\n    \"required\": true\n},\nSource API Documentation:\n{\n    \"name\": \"Search_Flights\",\n    \"endpoint\": \"/api/v1/flights/searchFlights\",\n    \"func_description\": \" \",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"fromId\": {\n                \"type\": \"String\",\n                \"description\": \"From/Departure location Id. fromId can be retrieved from api/v1/flights/searchDestination(Search Flight Location) endpoint in Flights collection as id.\",\n                \"example_value\": \"BOM.AIRPORT\",\n                \"required\": true\n            },\n            \"toId\": {\n                \"type\": \"String\",\n                \"description\": \"To/Arrival location Id. toId can be retrieved from api/v1/flights/searchDestination(Search Flight Location) endpoint in Flights collection as id.\",\n                \"example_value\": \"DEL.AIRPORT\",\n                \"required\": true\n            },\n            \"departDate\": {\n                \"type\": \"Date (yyyy-mm-dd)\",\n                \"description\": \"Departure or travel date.\nFormat: YYYY-MM-DD\",\n                \"example_value\": \"\",\n                \"required\": true\n            }\n        },\n        \"required\": [\n            \"fromId\",\n            \"toId\",\n            \"departDate\"\n        ]\n    }\n}\nList of A Source API Resopnse Field:\n[\n    {\n        \"field_name\": \"$.aggregation.flightTimes[].departure[]\",\n        \"field_example\": \"[\n            {\n                \"start\": \"00:00\",\n                \"end\": \"05:59\",\n                \"count\": 31\n            },\n            {\n                \"start\": \"06:00\",\n                \"end\": \"11:59\",\n                \"count\": 61\n            },\n            {\n                \"start\": \"12:00\",\n                \"end\": \"17:59\",\n                \"count\": 54\n            }\n        ]\n    },\n    {\n        \"field_name\": \"$.flightOffers[].segments[].legs[]\",\n        \"field_example\": \"[\n            {\n                \"departureTime\": \"2025-06-15T06:00:00\",\n                \"arrivalTime\": \"2025-06-15T07:55:00\",\n                \"legs\": [\n                    {\n                        \"departureTime\": \"2025-06-15T06:00:00\",\n                        \"arrivalTime\": \"2025-06-15T07:55:00\",\n                        \"departureAirport\": {\n                            \"type\": \"AIRPORT\",\n                            \"code\": \"BOM\",\n                            \"name\": \"Chhatrapati Shivaji International Airport Mumbai\",\n                            \"city\": \"BOM\",\n                            \"cityName\": \"Mumbai\",\n                            \"country\": \"IN\",\n                            \"countryName\": \"India\",\n                            \"province\": \"Maharashtra\"\n                        },\n                        \"arrivalAirport\": {\n                            \"type\": \"AIRPORT\",\n                            \"code\": \"DEL\",\n                            \"name\": \"Delhi International Airport\",\n                            \"city\": \"DEL\",\n                            \"cityName\": \"New Delhi\",\n                            \"country\": \"IN\",\n                            \"countryName\": \"India\"\n                        },\n                    }\n                ]\n            }\n        ]\" \n    }\n    \n]\nOutput:\n[\n    {\n        \"reason\": \"The 'pickUpTime' parameter in the target API requires a specific car rental return time (24-hour format). The source API's 'arrivalTime' field in flight segments provides exact arrival timestamps (e.g., '2025-06-15T07:55:00'). While the data types differ (timestamp vs time), the time portion can be extracted. This creates a potential business association where a traveler wants to rent a car two hours after the flight arrives.,\n        \"jsonpath\": \"$.flightOffers[].segments[].legs[].arrivalTime\",\n        \"confidence\": 90,\n        \"dependency_relationship\": \"Soft Dependency(Business-association)\"\n    },\n    {\n        \"reason\": \"The 'departure[]' time ranges represent when flights take off, which is irrelevant for determining car rental drop-off times. Even if considering a scenario where someone rents a car before departure (which contradicts the target API's purpose), these are still aggregated ranges rather than specific flight times.\",\n        \"jsonpath\": \"$.aggregation.flightTimes[].departure[]\",\n        \"confidence\": 10,\n        \"dependency_relationship\": null\n    }\n]\n\n\n#OUTPUT JSON FORMAT:\n[\n    {\n        \"target_api_params\": <<target_api_params_name>>,\n        \"reason\": <<reason>>,\n        \"source_jsonpath\": <<jsonpath>>,\n        \"confidence\": <<0-100>>,\n        \"dependency_relationship\": <<Soft Dependency(Business-association) or Hard Dependency(Prerequisite API) or null>>,\n    }\n]\n\n"}, {"role": "user", "content": "\nTarget API Documentation:\n{'name': 'Get_Seat_Map', 'endpoint': '/api/v1/flights/getSeatMap', 'func_description': None, 'parameters': {'type': 'object', 'properties': {'offerToken': {'type': 'String', 'description': 'offerToken can be retrieved from api/v1/flights/searchFlights(Search Flights) or api/v1/flights/searchFlightsMultiStops(Search Flights Multi Stops) endpoints in Flights collection as offerToken.', 'example_value': '', 'required': True}, 'currency_code': {'type': 'String', 'description': 'The currency code. currency_code can be retrieved from api/v1/meta/getCurrency(Get Currency) endpoint in Hotels collection.', 'example_value': 'AED', 'required': False}}, 'required': ['offerToken']}}\nTarget Parameters Of Target API:\nofferToken:Unique token identifying a flight offer, obtained from flight search endpoints.\nSource API Documentation:\n{'name': 'Search_Flights_Multi_Stops', 'endpoint': '/api/v1/flights/searchFlightsMultiStops', 'func_description': 'This API is ideal for travelers planning multi-stop flights. It searches flight options based on specified legs (departure, arrival, and dates), with sorting by best, cheapest, or fastest options. Users can filter by cabin class, passenger count, and age groups. The response includes flight details like price, duration, airline, baggage policies, and departure/arrival times. The legs parameter must include all segments of the journey.', 'parameters': {'type': 'object', 'properties': {'legs': {'type': 'String', 'description': \"The legs must contain the fromId, toId and date in object format and must be passed in an array.\\nEXAMPLE:\\n[\\n{\\n'fromId': 'BOM.AIRPORT',\\n'toId': 'AMD.AIRPORT',\\n'date': '2024-05-25'\\n},\\n\u2026\\n]\\nNote: If there are multiple stops, there should be more leg objects in the array.\", 'example_value': \"[{'fromId':'BOM.AIRPORT','toId':'AMD.AIRPORT','date':'2024-05-25'},{'fromId':'AMD.AIRPORT','toId':'BOM.AIRPORT','date':'2024-05-28'}]\", 'required': True}, 'pageNo': {'type': 'Number', 'description': 'The page number.', 'example_value': '1', 'required': False}, 'adults': {'type': 'Number', 'description': 'The number of guests who are 18 years of age or older. The default value is set to 1.', 'example_value': '1', 'required': False}, 'children': {'type': 'String', 'description': 'The number of children, including infants, who are under 18.\\nExample:\\nChild 1 Age = 8 months\\nChild 2 Age = 1 year\\nChild 3 Age = 17 years\\nHere is what the request parameter would look like:\\nchildren_age: 0,1,17', 'example_value': '0,17', 'required': False}, 'sort': {'type': 'Enum', 'description': 'This parameter orders result by BEST, CHEAPEST or FASTEST flights.', 'example_value': '', 'required': False}, 'cabinClass': {'type': 'Enum', 'description': 'Search for flights that match the cabin class specified. Cabin call can be either ECONOMY, PREMIUM_ECONOMY, BUSINESS or FIRST.', 'example_value': '', 'required': False}, 'currency_code': {'type': 'String', 'description': 'The currency code. currency_code can be retrieved from api/v1/meta/getCurrency(Get Currency) endpoint in Hotels collection.', 'example_value': 'AED', 'required': False}}, 'required': ['legs']}}\nList of most likely Source API Resopnse Fields:\n[[{'$.searchId': '99527EA1799731DFBC5DCC0D3A95CE8B'}], [{'$.flightOffers[*]': {'token': 'd6a1f_H4sIAAAAAAAA_y2Qb2-qMBSHP818R-HwnyXNgsB22QAVUefeNFgKwnXD0N6IfvrbiWlznuf8knOS9ijEmT-ran1qm6Pgyj-Oml70TSkYov23Wg-yHPr-b_vTqGU7qPNF6qehbqX-XndlUUFV5KHP-xdWnls0oBpHn0WUZ35CijxekmUeB3H2NmOjUPhA8aw9MFRixfO8STnFS999-IBtZMXb9R9fe79HtBfYRLab75aF7nrxFA74rXBgb967CqfBZVzcfJ6GXF8V_JrduNicYifrjustzDfpNp-vOj5mmtgkYWSsYcXTokq2ci7TLpfF7TVMwlRLAiiSQBvvaxmlGBAyHQ_ufV9y7LgPpwLr2qSVwOtd7L5_Ta3Anu1MTxsxGLbuzTg7MSra_ueDXbEdeQCK_MHyqlvKntiRbVgycB_Bkx6Aea5OA5f2ZPjyNkRDmuRREiRLAgsERiL1QMzfhBLTlKgIOGbtSmPEAiZZk9-8JYCmFR2JdxI3YnTnzh7-AxRbxHUAAgAA', 'segments': [{'departureAirport': {'type': 'AIRPORT', 'code': 'BOM', 'name': 'Chhatrapati Shivaji International Airport Mumbai', 'city': 'BOM', 'cityName': 'Mumbai', 'country': 'IN', 'countryName': 'India', 'province': 'Maharashtra'}, 'arrivalAirport': {'type': 'AIRPORT', 'code': 'AMD', 'name': 'Sardar Vallabhbhai Patel International Airport', 'city': 'AMD', 'cityName': 'Ahmedabad', 'country': 'IN', 'countryName': 'India', 'province': 'Gujarat'}, 'departureTime': '2025-05-25T01:00:00', 'arrivalTime': '2025-05-25T02:20:00', 'legs': [{'departureTime': '2025-05-25T01:00:00', 'arrivalTime': '2025-05-25T02:20:00', 'departureAirport': {'type': 'AIRPORT', 'code': 'BOM', 'name': 'Chhatrapati Shivaji International Airport Mumbai', 'city': 'BOM', 'cityName': 'Mumbai', 'country': 'IN', 'countryName': 'India', 'province': 'Maharashtra'}, 'arrivalAirport': {'type': 'AIRPORT', 'code': 'AMD', 'name': 'Sardar Vallabhbhai Patel International Airport', 'city': 'AMD', 'cityName': 'Ahmedabad', 'country': 'IN', 'countryName': 'India', 'province': 'Gujarat'}, 'cabinClass': 'ECONOMY', 'flightInfo': {'facilities': [], 'flightNumber': 911, 'planeType': '', 'carrierInfo': {'operatingCarrier': '6E', 'marketingCarrier': '6E', 'operatingCarrierDisclosureText': ''}}, 'carriers': ['6E', '6E'], 'carriersData': [{'name': 'IndiGo', 'code': '6E', 'logo': 'https://r-xx.bstatic.com/data/airlines_logo/6E.png'}, {'name': 'IndiGo', 'code': '6E', 'logo': 'https://r-xx.bstatic.com/data/airlines_logo/6E.png'}], 'totalTime': 4800, 'flightStops': [], 'amenities': []}], 'totalTime': 4800, 'travellerCheckedLuggage': [{'travellerReference': '1', 'luggageAllowance': {'luggageType': 'CHECKED_IN', 'ruleType': 'PIECE_BASED', 'maxPiece': 1, 'maxWeightPerPiece': 33.1, 'massUnit': 'LB'}}], 'travellerCabinLuggage': [{'travellerReference': '1', 'luggageAllowance': {'luggageType': 'HAND', 'maxPiece': 1, 'maxWeightPerPiece': 15.4, 'massUnit': 'LB', 'sizeRestrictions': {'maxLength': 21.7, 'maxWidth': 13.8, 'maxHeight': 9.8, 'sizeUnit': 'INCH'}}, 'personalItem': True}], 'isAtolProtected': False, 'showWarningDestinationAirport': False, 'showWarningOriginAirport': False}, {'departureAirport': {'type': 'AIRPORT', 'code': 'AMD', 'name': 'Sardar Vallabhbhai Patel International Airport', 'city': 'AMD', 'cityName': 'Ahmedabad', 'country': 'IN', 'countryName': 'India', 'province': 'Gujarat'}, 'arrivalAirport': {'type': 'AIRPORT', 'code': 'BOM', 'name': 'Chhatrapati Shivaji International Airport Mumbai', 'city': 'BOM', 'cityName': 'Mumbai', 'country': 'IN', 'countryName': 'India', 'province': 'Maharashtra'}, 'departureTime': '2025-05-28T23:45:00', 'arrivalTime': '2025-05-29T01:15:00', 'legs': [{'departureTime': '2025-05-28T23:45:00', 'arrivalTime': '2025-05-29T01:15:00', 'departureAirport': {'type': 'AIRPORT', 'code': 'AMD', 'name': 'Sardar Vallabhbhai Patel International Airport', 'city': 'AMD', 'cityName': 'Ahmedabad', 'country': 'IN', 'countryName': 'India', 'province': 'Gujarat'}, 'arrivalAirport': {'type': 'AIRPORT', 'code': 'BOM', 'name': 'Chhatrapati Shivaji International Airport Mumbai', 'city': 'BOM', 'cityName': 'Mumbai', 'country': 'IN', 'countryName': 'India', 'province': 'Maharashtra'}, 'cabinClass': 'ECONOMY', 'flightInfo': {'facilities': [], 'flightNumber': 6351, 'planeType': '', 'carrierInfo': {'operatingCarrier': '6E', 'marketingCarrier': '6E', 'operatingCarrierDisclosureText': ''}}, 'carriers': ['6E', '6E'], 'carriersData': [{'name': 'IndiGo', 'code': '6E', 'logo': 'https://r-xx.bstatic.com/data/airlines_logo/6E.png'}, {'name': 'IndiGo', 'code': '6E', 'logo': 'https://r-xx.bstatic.com/data/airlines_logo/6E.png'}], 'totalTime': 5400, 'flightStops': [], 'amenities': []}], 'totalTime': 5400, 'travellerCheckedLuggage': [{'travellerReference': '1', 'luggageAllowance': {'luggageType': 'CHECKED_IN', 'ruleType': 'PIECE_BASED', 'maxPiece': 1, 'maxWeightPerPiece': 33.1, 'massUnit': 'LB'}}], 'travellerCabinLuggage': [{'travellerReference': '1', 'luggageAllowance': {'luggageType': 'HAND', 'maxPiece': 1, 'maxWeightPerPiece': 15.4, 'massUnit': 'LB', 'sizeRestrictions': {'maxLength': 21.7, 'maxWidth': 13.8, 'maxHeight': 9.8, 'sizeUnit': 'INCH'}}, 'personalItem': True}], 'isAtolProtected': False, 'showWarningDestinationAirport': False, 'showWarningOriginAirport': False}], 'priceBreakdown': {'total': {'currencyCode': 'USD', 'units': 96, 'nanos': 790000000}, 'baseFare': {'currencyCode': 'USD', 'units': 73, 'nanos': 460000000}, 'fee': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'tax': {'currencyCode': 'USD', 'units': 23, 'nanos': 330000000}, 'totalRounded': {'currencyCode': 'USD', 'nanos': 0, 'units': 97}, 'discount': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'totalWithoutDiscount': {'currencyCode': 'USD', 'units': 96, 'nanos': 790000000}, 'totalWithoutDiscountRounded': {'currencyCode': 'USD', 'nanos': 0, 'units': 97}, 'carrierTaxBreakdown': [{'carrier': {'name': 'IndiGo', 'code': '6E', 'logo': 'https://r-xx.bstatic.com/data/airlines_logo/6E.png'}, 'avgPerAdult': {'currencyCode': 'USD', 'units': 23, 'nanos': 330000000}}]}, 'travellerPrices': [{'travellerPriceBreakdown': {'total': {'currencyCode': 'USD', 'units': 96, 'nanos': 790000000}, 'baseFare': {'currencyCode': 'USD', 'units': 73, 'nanos': 460000000}, 'fee': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'tax': {'currencyCode': 'USD', 'units': 23, 'nanos': 330000000}, 'totalRounded': {'currencyCode': 'USD', 'nanos': 0, 'units': 97}, 'discount': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'totalWithoutDiscount': {'currencyCode': 'USD', 'units': 96, 'nanos': 790000000}, 'totalWithoutDiscountRounded': {'currencyCode': 'USD', 'nanos': 0, 'units': 97}}, 'travellerReference': '1', 'travellerType': 'ADULT'}], 'priceDisplayRequirements': [], 'pointOfSale': 'us', 'tripType': 'ROUNDTRIP', 'posMismatch': {'detectedPointOfSale': 'us', 'isPOSMismatch': False, 'offerSalesCountry': 'us'}, 'includedProductsBySegment': [[{'travellerReference': '1', 'travellerProducts': [{'type': 'checkedInBaggage', 'product': {'luggageType': 'CHECKED_IN', 'ruleType': 'PIECE_BASED', 'maxPiece': 1, 'maxWeightPerPiece': 33.1, 'massUnit': 'LB'}}, {'type': 'cabinBaggage', 'product': {'luggageType': 'HAND', 'maxPiece': 1, 'maxWeightPerPiece': 15.4, 'massUnit': 'LB', 'sizeRestrictions': {'maxLength': 21.7, 'maxWidth': 13.8, 'maxHeight': 9.8, 'sizeUnit': 'INCH'}}}]}], [{'travellerReference': '1', 'travellerProducts': [{'type': 'checkedInBaggage', 'product': {'luggageType': 'CHECKED_IN', 'ruleType': 'PIECE_BASED', 'maxPiece': 1, 'maxWeightPerPiece': 33.1, 'massUnit': 'LB'}}, {'type': 'cabinBaggage', 'product': {'luggageType': 'HAND', 'maxPiece': 1, 'maxWeightPerPiece': 15.4, 'massUnit': 'LB', 'sizeRestrictions': {'maxLength': 21.7, 'maxWidth': 13.8, 'maxHeight': 9.8, 'sizeUnit': 'INCH'}}}]}]], 'includedProducts': {'areAllSegmentsIdentical': True, 'segments': [[{'luggageType': 'PERSONAL_ITEM', 'maxPiece': 1, 'piecePerPax': 1}, {'luggageType': 'HAND', 'maxPiece': 1, 'maxWeightPerPiece': 15.4, 'massUnit': 'LB', 'sizeRestrictions': {'maxLength': 21.7, 'maxWidth': 13.8, 'maxHeight': 9.8, 'sizeUnit': 'INCH'}, 'piecePerPax': 1}]]}, 'extraProducts': [{'type': 'flexibleTicket', 'priceBreakdown': {'total': {'currencyCode': 'USD', 'units': 13, 'nanos': 550000000}, 'baseFare': {'currencyCode': 'USD', 'units': 13, 'nanos': 550000000}, 'fee': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'tax': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'discount': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'totalWithoutDiscount': {'currencyCode': 'USD', 'units': 13, 'nanos': 550000000}}}], 'offerExtras': {'flexibleTicket': {'airProductReference': 'n/a', 'travellers': ['1'], 'recommendation': {'recommended': False, 'confidence': 'UNKNOWN_LEVEL'}, 'priceBreakdown': {'total': {'currencyCode': 'USD', 'units': 13, 'nanos': 550000000}, 'baseFare': {'currencyCode': 'USD', 'units': 13, 'nanos': 550000000}, 'fee': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'tax': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'totalRounded': {'currencyCode': 'USD', 'nanos': 0, 'units': 14}, 'discount': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'totalWithoutDiscount': {'currencyCode': 'USD', 'units': 13, 'nanos': 550000000}, 'totalWithoutDiscountRounded': {'currencyCode': 'USD', 'nanos': 0, 'units': 14}}, 'supplierInfo': {'name': 'Gotogate, Inc.', 'termsUrl': 'https://flights-us.gotogate.com/rf/travel-conditions', 'privacyPolicyUrl': 'https://flights-us.gotogate.com/rf/privacy-policy'}}}, 'ancillaries': {'flexibleTicket': {'airProductReference': 'n/a', 'travellers': ['1'], 'priceBreakdown': {'total': {'currencyCode': 'USD', 'units': 13, 'nanos': 550000000}, 'baseFare': {'currencyCode': 'USD', 'units': 13, 'nanos': 550000000}, 'fee': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'tax': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'discount': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'totalWithoutDiscount': {'currencyCode': 'USD', 'units': 13, 'nanos': 550000000}}, 'preSelected': False, 'recommendation': {'recommended': False, 'confidence': 'UNKNOWN_LEVEL'}, 'supplierInfo': {'name': 'Gotogate, Inc.', 'termsUrl': 'https://flights-us.gotogate.com/rf/travel-conditions', 'privacyPolicyUrl': 'https://flights-us.gotogate.com/rf/privacy-policy'}}}, 'appliedDiscounts': [], 'offerKeyToHighlight': '1_6E911_2_6E6351.BOM20250525.AMD20250528', 'extraProductDisplayRequirements': {}, 'unifiedPriceBreakdown': {'price': {'currencyCode': 'USD', 'units': 96, 'nanos': 790000000}, 'items': [{'scope': 'FLIGHT_ADULT', 'id': 'flight_adult', 'title': 'Adult (1)', 'price': {'currencyCode': 'USD', 'units': 96, 'nanos': 790000000}, 'items': [{'id': 'flight_adult-basefare', 'title': 'Flight fare', 'price': {'currencyCode': 'USD', 'units': 73, 'nanos': 460000000}, 'items': []}, {'id': 'flight_adult-tax', 'title': 'Taxes and airline fees', 'price': {'currencyCode': 'USD', 'units': 23, 'nanos': 330000000}, 'items': []}]}], 'addedItems': []}}}, {'$.flightOffers[*]': {'token': 'd6a1f_H4sIAAAAAAAA_y2QYW-qMBSGf838RqG1FjBpbhC4GxugIur1fmmwFIS5YWgX0V-_TpY253nOm_QkPSelLnJumtW5qU9KGl8S1J3q6kIJwLsPs-p1OXbde_NZm0XTm4tl4iUBmiXeATm6mNA09OHzwx9RXBrQg4qG__IwS72Y5Vm0Yqss8qP0eSIGZcie00lzFKCghuu6o0pOV57z6z0lYBbtNi-e9fqIeKcoBsTJ9qscOZiMYU-fcxse8KMraeJfh-Xdk0kg0TqXt_Qu1fYc2Wl72uzgYpvsssW6lUNqqW0chNMNXMskL-Odfpda1-vy_jeIg8SKfZjHvjU8xgrOKQQA2y589F0hqe38OlcUWaOWim72kfP6f2wVdYk9fm2gcEqQO5HiLLhqus83caMkdCE09AaLG5oZB0ZCgoht6G2OwRPyIZZl3xBtT1NP35pZwNI8aULNgsEliGxtR4Z_As4w1igZtHHlaBNsBoVmxX7yhkEwTmhZtNe4s2l7aUn_Dbrvkwv_AQAA', 'segments': [{'departureAirport': {'type': 'AIRPORT', 'code': 'BOM', 'name': 'Chhatrapati Shivaji International Airport Mumbai', 'city': 'BOM', 'cityName': 'Mumbai', 'country': 'IN', 'countryName': 'India', 'province': 'Maharashtra'}, 'arrivalAirport': {'type': 'AIRPORT', 'code': 'AMD', 'name': 'Sardar Vallabhbhai Patel International Airport', 'city': 'AMD', 'cityName': 'Ahmedabad', 'country': 'IN', 'countryName': 'India', 'province': 'Gujarat'}, 'departureTime': '2025-05-25T01:00:00', 'arrivalTime': '2025-05-25T02:20:00', 'legs': [{'departureTime': '2025-05-25T01:00:00', 'arrivalTime': '2025-05-25T02:20:00', 'departureAirport': {'type': 'AIRPORT', 'code': 'BOM', 'name': 'Chhatrapati Shivaji International Airport Mumbai', 'city': 'BOM', 'cityName': 'Mumbai', 'country': 'IN', 'countryName': 'India', 'province': 'Maharashtra'}, 'arrivalAirport': {'type': 'AIRPORT', 'code': 'AMD', 'name': 'Sardar Vallabhbhai Patel International Airport', 'city': 'AMD', 'cityName': 'Ahmedabad', 'country': 'IN', 'countryName': 'India', 'province': 'Gujarat'}, 'cabinClass': 'ECONOMY', 'flightInfo': {'facilities': [], 'flightNumber': 911, 'planeType': '', 'carrierInfo': {'operatingCarrier': '6E', 'marketingCarrier': '6E', 'operatingCarrierDisclosureText': ''}}, 'carriers': ['6E', '6E'], 'carriersData': [{'name': 'IndiGo', 'code': '6E', 'logo': 'https://r-xx.bstatic.com/data/airlines_logo/6E.png'}, {'name': 'IndiGo', 'code': '6E', 'logo': 'https://r-xx.bstatic.com/data/airlines_logo/6E.png'}], 'totalTime': 4800, 'flightStops': [], 'amenities': []}], 'totalTime': 4800, 'travellerCheckedLuggage': [{'travellerReference': '1', 'luggageAllowance': {'luggageType': 'CHECKED_IN', 'ruleType': 'PIECE_BASED', 'maxPiece': 1, 'maxWeightPerPiece': 33.1, 'massUnit': 'LB'}}], 'travellerCabinLuggage': [{'travellerReference': '1', 'luggageAllowance': {'luggageType': 'HAND', 'maxPiece': 1, 'maxWeightPerPiece': 15.4, 'massUnit': 'LB', 'sizeRestrictions': {'maxLength': 21.7, 'maxWidth': 13.8, 'maxHeight': 9.8, 'sizeUnit': 'INCH'}}, 'personalItem': True}], 'isAtolProtected': False, 'showWarningDestinationAirport': False, 'showWarningOriginAirport': False}, {'departureAirport': {'type': 'AIRPORT', 'code': 'AMD', 'name': 'Sardar Vallabhbhai Patel International Airport', 'city': 'AMD', 'cityName': 'Ahmedabad', 'country': 'IN', 'countryName': 'India', 'province': 'Gujarat'}, 'arrivalAirport': {'type': 'AIRPORT', 'code': 'BOM', 'name': 'Chhatrapati Shivaji International Airport Mumbai', 'city': 'BOM', 'cityName': 'Mumbai', 'country': 'IN', 'countryName': 'India', 'province': 'Maharashtra'}, 'departureTime': '2025-05-28T10:55:00', 'arrivalTime': '2025-05-28T12:25:00', 'legs': [{'departureTime': '2025-05-28T10:55:00', 'arrivalTime': '2025-05-28T12:25:00', 'departureAirport': {'type': 'AIRPORT', 'code': 'AMD', 'name': 'Sardar Vallabhbhai Patel International Airport', 'city': 'AMD', 'cityName': 'Ahmedabad', 'country': 'IN', 'countryName': 'India', 'province': 'Gujarat'}, 'arrivalAirport': {'type': 'AIRPORT', 'code': 'BOM', 'name': 'Chhatrapati Shivaji International Airport Mumbai', 'city': 'BOM', 'cityName': 'Mumbai', 'country': 'IN', 'countryName': 'India', 'province': 'Maharashtra'}, 'cabinClass': 'ECONOMY', 'flightInfo': {'facilities': [], 'flightNumber': 6267, 'planeType': '', 'carrierInfo': {'operatingCarrier': '6E', 'marketingCarrier': '6E', 'operatingCarrierDisclosureText': ''}}, 'carriers': ['6E', '6E'], 'carriersData': [{'name': 'IndiGo', 'code': '6E', 'logo': 'https://r-xx.bstatic.com/data/airlines_logo/6E.png'}, {'name': 'IndiGo', 'code': '6E', 'logo': 'https://r-xx.bstatic.com/data/airlines_logo/6E.png'}], 'totalTime': 5400, 'flightStops': [], 'amenities': []}], 'totalTime': 5400, 'travellerCheckedLuggage': [{'travellerReference': '1', 'luggageAllowance': {'luggageType': 'CHECKED_IN', 'ruleType': 'PIECE_BASED', 'maxPiece': 1, 'maxWeightPerPiece': 33.1, 'massUnit': 'LB'}}], 'travellerCabinLuggage': [{'travellerReference': '1', 'luggageAllowance': {'luggageType': 'HAND', 'maxPiece': 1, 'maxWeightPerPiece': 15.4, 'massUnit': 'LB', 'sizeRestrictions': {'maxLength': 21.7, 'maxWidth': 13.8, 'maxHeight': 9.8, 'sizeUnit': 'INCH'}}, 'personalItem': True}], 'isAtolProtected': False, 'showWarningDestinationAirport': False, 'showWarningOriginAirport': False}], 'priceBreakdown': {'total': {'currencyCode': 'USD', 'units': 96, 'nanos': 790000000}, 'baseFare': {'currencyCode': 'USD', 'units': 73, 'nanos': 460000000}, 'fee': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'tax': {'currencyCode': 'USD', 'units': 23, 'nanos': 330000000}, 'totalRounded': {'currencyCode': 'USD', 'nanos': 0, 'units': 97}, 'discount': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'totalWithoutDiscount': {'currencyCode': 'USD', 'units': 96, 'nanos': 790000000}, 'totalWithoutDiscountRounded': {'currencyCode': 'USD', 'nanos': 0, 'units': 97}, 'carrierTaxBreakdown': [{'carrier': {'name': 'IndiGo', 'code': '6E', 'logo': 'https://r-xx.bstatic.com/data/airlines_logo/6E.png'}, 'avgPerAdult': {'currencyCode': 'USD', 'units': 23, 'nanos': 330000000}}]}, 'travellerPrices': [{'travellerPriceBreakdown': {'total': {'currencyCode': 'USD', 'units': 96, 'nanos': 790000000}, 'baseFare': {'currencyCode': 'USD', 'units': 73, 'nanos': 460000000}, 'fee': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'tax': {'currencyCode': 'USD', 'units': 23, 'nanos': 330000000}, 'totalRounded': {'currencyCode': 'USD', 'nanos': 0, 'units': 97}, 'discount': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'totalWithoutDiscount': {'currencyCode': 'USD', 'units': 96, 'nanos': 790000000}, 'totalWithoutDiscountRounded': {'currencyCode': 'USD', 'nanos': 0, 'units': 97}}, 'travellerReference': '1', 'travellerType': 'ADULT'}], 'priceDisplayRequirements': [], 'pointOfSale': 'us', 'tripType': 'ROUNDTRIP', 'posMismatch': {'detectedPointOfSale': 'us', 'isPOSMismatch': False, 'offerSalesCountry': 'us'}, 'includedProductsBySegment': [[{'travellerReference': '1', 'travellerProducts': [{'type': 'checkedInBaggage', 'product': {'luggageType': 'CHECKED_IN', 'ruleType': 'PIECE_BASED', 'maxPiece': 1, 'maxWeightPerPiece': 33.1, 'massUnit': 'LB'}}, {'type': 'cabinBaggage', 'product': {'luggageType': 'HAND', 'maxPiece': 1, 'maxWeightPerPiece': 15.4, 'massUnit': 'LB', 'sizeRestrictions': {'maxLength': 21.7, 'maxWidth': 13.8, 'maxHeight': 9.8, 'sizeUnit': 'INCH'}}}]}], [{'travellerReference': '1', 'travellerProducts': [{'type': 'checkedInBaggage', 'product': {'luggageType': 'CHECKED_IN', 'ruleType': 'PIECE_BASED', 'maxPiece': 1, 'maxWeightPerPiece': 33.1, 'massUnit': 'LB'}}, {'type': 'cabinBaggage', 'product': {'luggageType': 'HAND', 'maxPiece': 1, 'maxWeightPerPiece': 15.4, 'massUnit': 'LB', 'sizeRestrictions': {'maxLength': 21.7, 'maxWidth': 13.8, 'maxHeight': 9.8, 'sizeUnit': 'INCH'}}}]}]], 'includedProducts': {'areAllSegmentsIdentical': True, 'segments': [[{'luggageType': 'PERSONAL_ITEM', 'maxPiece': 1, 'piecePerPax': 1}, {'luggageType': 'HAND', 'maxPiece': 1, 'maxWeightPerPiece': 15.4, 'massUnit': 'LB', 'sizeRestrictions': {'maxLength': 21.7, 'maxWidth': 13.8, 'maxHeight': 9.8, 'sizeUnit': 'INCH'}, 'piecePerPax': 1}]]}, 'extraProducts': [{'type': 'flexibleTicket', 'priceBreakdown': {'total': {'currencyCode': 'USD', 'units': 13, 'nanos': 550000000}, 'baseFare': {'currencyCode': 'USD', 'units': 13, 'nanos': 550000000}, 'fee': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'tax': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'discount': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'totalWithoutDiscount': {'currencyCode': 'USD', 'units': 13, 'nanos': 550000000}}}], 'offerExtras': {'flexibleTicket': {'airProductReference': 'n/a', 'travellers': ['1'], 'recommendation': {'recommended': False, 'confidence': 'UNKNOWN_LEVEL'}, 'priceBreakdown': {'total': {'currencyCode': 'USD', 'units': 13, 'nanos': 550000000}, 'baseFare': {'currencyCode': 'USD', 'units': 13, 'nanos': 550000000}, 'fee': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'tax': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'totalRounded': {'currencyCode': 'USD', 'nanos': 0, 'units': 14}, 'discount': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'totalWithoutDiscount': {'currencyCode': 'USD', 'units': 13, 'nanos': 550000000}, 'totalWithoutDiscountRounded': {'currencyCode': 'USD', 'nanos': 0, 'units': 14}}, 'supplierInfo': {'name': 'Gotogate, Inc.', 'termsUrl': 'https://flights-us.gotogate.com/rf/travel-conditions', 'privacyPolicyUrl': 'https://flights-us.gotogate.com/rf/privacy-policy'}}}, 'ancillaries': {'flexibleTicket': {'airProductReference': 'n/a', 'travellers': ['1'], 'priceBreakdown': {'total': {'currencyCode': 'USD', 'units': 13, 'nanos': 550000000}, 'baseFare': {'currencyCode': 'USD', 'units': 13, 'nanos': 550000000}, 'fee': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'tax': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'discount': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'totalWithoutDiscount': {'currencyCode': 'USD', 'units': 13, 'nanos': 550000000}}, 'preSelected': False, 'recommendation': {'recommended': False, 'confidence': 'UNKNOWN_LEVEL'}, 'supplierInfo': {'name': 'Gotogate, Inc.', 'termsUrl': 'https://flights-us.gotogate.com/rf/travel-conditions', 'privacyPolicyUrl': 'https://flights-us.gotogate.com/rf/privacy-policy'}}}, 'appliedDiscounts': [], 'offerKeyToHighlight': '1_6E911_2_6E6267.BOM20250525.AMD20250528', 'extraProductDisplayRequirements': {}, 'unifiedPriceBreakdown': {'price': {'currencyCode': 'USD', 'units': 96, 'nanos': 790000000}, 'items': [{'scope': 'FLIGHT_ADULT', 'id': 'flight_adult', 'title': 'Adult (1)', 'price': {'currencyCode': 'USD', 'units': 96, 'nanos': 790000000}, 'items': [{'id': 'flight_adult-basefare', 'title': 'Flight fare', 'price': {'currencyCode': 'USD', 'units': 73, 'nanos': 460000000}, 'items': []}, {'id': 'flight_adult-tax', 'title': 'Taxes and airline fees', 'price': {'currencyCode': 'USD', 'units': 23, 'nanos': 330000000}, 'items': []}]}], 'addedItems': []}}}], [{'$.displayOptions': {'brandedFaresShownByDefault': False, 'directFlightsOnlyFilterIgnored': False, 'hideFlexiblePricesBanner': False}}], [{'$.baggagePolicies[*]': {'code': '6E', 'name': 'IndiGo', 'url': 'https://www.goindigo.in/baggage.html'}}, {'$.baggagePolicies[*]': {'code': 'AI', 'name': 'Air India', 'url': 'http://www.airindia.in/baggage.htm'}}], [{'$.aggregation': {'totalCount': 925, 'filteredTotalCount': 925, 'stops': [{'numberOfStops': 0, 'count': 225, 'minPrice': {'currencyCode': 'USD', 'units': 96, 'nanos': 790000000}, 'minPriceRound': {'currencyCode': 'USD', 'units': 97, 'nanos': 0}}, {'numberOfStops': 1, 'count': 875, 'minPrice': {'currencyCode': 'USD', 'units': 92, 'nanos': 130000000}, 'minPriceRound': {'currencyCode': 'USD', 'units': 93, 'nanos': 0}}], 'airlines': [{'name': 'IndiGo', 'logoUrl': 'https://r-xx.bstatic.com/data/airlines_logo/6E.png', 'iataCode': '6E', 'count': 637, 'minPrice': {'currencyCode': 'USD', 'units': 92, 'nanos': 130000000}}, {'name': 'Air India', 'logoUrl': 'https://r-xx.bstatic.com/data/airlines_logo/AI.png', 'iataCode': 'AI', 'count': 613, 'minPrice': {'currencyCode': 'USD', 'units': 102, 'nanos': 90000000}}], 'departureIntervals': [{'start': '00:35', 'end': '23:00'}, {'start': '00:05', 'end': '23:45'}], 'flightTimes': [{'arrival': [{'start': '00:00', 'end': '05:59', 'count': 160}, {'start': '06:00', 'end': '11:59', 'count': 372}], 'departure': [{'start': '00:00', 'end': '05:59', 'count': 188}, {'start': '06:00', 'end': '11:59', 'count': 203}]}, {'arrival': [{'start': '00:00', 'end': '05:59', 'count': 274}, {'start': '06:00', 'end': '11:59', 'count': 238}], 'departure': [{'start': '00:00', 'end': '05:59', 'count': 197}, {'start': '06:00', 'end': '11:59', 'count': 365}]}], 'shortLayoverConnection': {'count': 14}, 'durationMin': 2, 'durationMax': 27, 'minPrice': {'currencyCode': 'USD', 'units': 92, 'nanos': 130000000}, 'minRoundPrice': {'currencyCode': 'USD', 'units': 93, 'nanos': 0}, 'minPriceFiltered': {'currencyCode': 'USD', 'units': 92, 'nanos': 130000000}, 'baggage': [{'paramName': 'includedBaggage', 'count': 924, 'enabled': True, 'baggageType': 'CABIN'}, {'paramName': 'includedBaggage', 'count': 550, 'enabled': True, 'baggageType': 'CHECKIN'}], 'budget': {'paramName': 'maxBudget', 'min': {'currencyCode': 'USD', 'units': 92, 'nanos': 130000000}, 'max': {'currencyCode': 'USD', 'units': 501, 'nanos': 200000000}}, 'budgetPerAdult': {'paramName': 'maxBudgetPerAdult', 'min': {'currencyCode': 'USD', 'units': 92, 'nanos': 130000000}, 'max': {'currencyCode': 'USD', 'units': 501, 'nanos': 200000000}}, 'duration': [{'min': 2, 'max': 27, 'durationType': 'JOURNEY', 'enabled': True, 'paramName': 'maxDuration'}, {'min': 1, 'max': 24, 'durationType': 'LAYOVER', 'enabled': True, 'paramName': 'maxLayoverDuration'}], 'filtersOrder': ['stops', 'airlines']}}], [{'$.priceAlertStatus': {'isEligible': False, 'isSearchEligible': False, 'isBlockoutEligible': True}}], [{'$.flightDeals[*]': {'key': 'CHEAPEST', 'offerToken': 'd6a1f_H4sIAAAAAAAA_1WQW2-jMBCFf03zhsGGcIlkrShhu6RALkDS9MUixhCStFTgKjS_fieQl2qsOd8cyUejOUr51c1UtbzU1VF2yneHqkY2VS4F4s2HWrbQDk1zrj8rNa9b9XkZudGcTCN3T2xoKlYVKD7b_xH5V41aVFL_LfU3sRuydBOs2GoTeEH8MhG9VLqW00l9ECiniuM4I3acrlz7wS010TTYJv9cbTFYvJHUQKa92a1SYjvvo9nSlywlb_EwFTTyrtdw7lujulZ8Bj5xK9wukuVtb2SXYr2d_83WWWBFaRFuvWsfazKDP3qC1x14UTTv-mVyvcX3DE_rh2jBOcUIGZaDh7nJO2rZD-aSEm3EQtJkF9iLcT1Y2SFYH7inWDeJM-nERXBZN5-v4oeaPnEMBa6Y_5Cpsmemb1nE_GWY-hQrcOLReCLehZS9OAM86S68imkICug4EAbK2bOBAgthPYTpwIy7yZlhgBQMm5jnQIKZ2AYt2d2vGX7knFiwA7kx_aQTvfgPoYalFhsCAAA.', 'price': {'currencyCode': 'USD', 'units': 92, 'nanos': 130000000}, 'priceRounded': {'currencyCode': 'USD', 'units': 93, 'nanos': 0}, 'travellerPrices': [{'travellerPriceBreakdown': {'total': {'currencyCode': 'USD', 'units': 92, 'nanos': 130000000}, 'baseFare': {'currencyCode': 'USD', 'units': 68, 'nanos': 450000000}, 'fee': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'tax': {'currencyCode': 'USD', 'units': 23, 'nanos': 680000000}, 'totalRounded': {'currencyCode': 'USD', 'nanos': 0, 'units': 93}, 'discount': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'totalWithoutDiscount': {'currencyCode': 'USD', 'units': 92, 'nanos': 130000000}, 'totalWithoutDiscountRounded': {'currencyCode': 'USD', 'nanos': 0, 'units': 93}}, 'travellerReference': '1', 'travellerType': 'ADULT'}]}}, {'$.flightDeals[*]': {'key': 'FASTEST', 'offerToken': 'd6a1f_H4sIAAAAAAAA_y1Q226jMBD9muQNg7kkUMlaOQR1SYEkQEjTFwscB5x2S4XdhfL168DK9pzL-MjWNFJ-iSddv33wupFC-xagbmVbl5IB2v7Rb50qVdu-889aL3mnb_YxjremE-OL6aqiQ11Tiz5dfrHyi4MO3FDwmgdpgiOSp-GBHNLQD5PnJRukJjqKlrxioESa53kzFRS5_1mHVsAJi-w3NnaTRVuJbLBy0_MhN9f5nKAdet7jl50xqSuK_X7Yj1jEW9Hvx2Cd3I_qNFkBN6e4SDfJKIbEkKdoG1gZPIo4v0aFyiRG30c-zE53MeR-PyZ-L48nQ0R5IJLifWFtpwcYpQgCYK89OOm2FMiaGZXInH_RXiXKzqG7e5ulRBBa3twbELRWprcU7INRydvPF_aDcGg6rqOpSZY_pqPlBIe24WlqqJPOFqYPnWrgkCm2sLDaNTGAobBRCBWW5LICeaFYReyHQYltK7gSWFFGFWPkcf9GHi4nEMz5OwnPCkbSrPnf-h-ydF8aAwIAAA..', 'price': {'currencyCode': 'USD', 'units': 113, 'nanos': 900000000}, 'priceRounded': {'currencyCode': 'USD', 'units': 114, 'nanos': 0}, 'travellerPrices': [{'travellerPriceBreakdown': {'total': {'currencyCode': 'USD', 'units': 113, 'nanos': 900000000}, 'baseFare': {'currencyCode': 'USD', 'units': 88, 'nanos': 0}, 'fee': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'tax': {'currencyCode': 'USD', 'units': 25, 'nanos': 900000000}, 'totalRounded': {'currencyCode': 'USD', 'nanos': 0, 'units': 114}, 'discount': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'totalWithoutDiscount': {'currencyCode': 'USD', 'units': 113, 'nanos': 900000000}, 'totalWithoutDiscountRounded': {'currencyCode': 'USD', 'nanos': 0, 'units': 114}}, 'travellerReference': '1', 'travellerType': 'ADULT'}]}}]]\nOUTPUT:\n"}]
2025-06-13 19:22:23,107 - logger_Get_Seat_Map - INFO - Search_Flights_Multi_Stops---output
:[{'target_api_params': 'offerToken', 'reason': "The 'offerToken' parameter in the target API is a unique identifier for a flight offer, which is explicitly mentioned to be obtainable from the 'searchFlights' or 'searchFlightsMultiStops' endpoints. The source API response includes a 'token' field within the 'flightOffers' array, which matches the description and purpose of the 'offerToken' parameter. This is a direct and necessary prerequisite for calling the target API.", 'source_jsonpath': '$.flightOffers[*].token', 'confidence': 100, 'dependency_relationship': 'Hard Dependency(Prerequisite API)'}, {'target_api_params': 'offerToken', 'reason': "The 'searchId' field in the source API response is a unique identifier for the search operation, but it does not serve as a token identifying a specific flight offer. Therefore, it cannot be used as the 'offerToken' parameter for the target API.", 'source_jsonpath': '$.searchId', 'confidence': 10, 'dependency_relationship': None}]
2025-06-13 19:22:23,149 - logger_Get_Seat_Map - INFO - messages
:[{"role": "system", "content": "\n#ROLE:\nYou are a professional API Dependency Evaluator. Your task is to analyze whether response fields from source APIs can serve as valid input parameters for a target API.\n\n#INPUT:\n1. Target API Documentation\n2. Target Parameters Of Target API(One input parameter you need to focus on)\n3. Source API Documentation\n4. List of most likely Source API Resopnse Fields\n\n#RULES:\n1. Carefully read the target API documentation to clearly understand the input parameter requirements of the target API, especially the parameter being focused on.\n2. Analyze the response fields of the source API to determine whether there is a business association with the target API parameter(Soft Dependence) or If it is a necessary prerequisite for calling the target API(Hard Dependence).The departure time of the flight is often related to the car rental drop-off time, while the arrival time of the flight is typically associated with the car rental pick-up time.\n3. Based on the context of the source API's response example, determine which specific field of the source API can be used as input for the target parameters of target api.\n4. Pay attention to whether the data type of the API's response field matches the data type of the target API's parameter.However, sometimes even though the data types do not match exactly, the response field of the source API may contain the information required by the target API parameter. For example, a field with the format \"yyy-mm-dd Hh-Mm\" may include the value needed for the pickUpTime parameter (which expects the format \"24-Hour Hh:Mm\"). In such cases, it is important to carefully examine the example values from the response fields to determine if they can be appropriately adapted or extracted for use as input parameters.\n\n#OUTPUT:\n1. Provide a confidence score between 0-100 for each judgment. If the confidence is below 80, set the dependency relationship to null.\n2. Provide reasons. The reasons should first analyze the meanings of the fields and parameters, determine whether the types match, and consider whether there are reasonable scenarios where the output field of the source API could serve as the input parameter of the target API, paying attention to the causal sequence. If no, reasons are given.\n\n\n#Example:\n\nExample1:\nTarget API Documentation:\n{\n\"name\": \"Car_Search\",\n\"func_description\": \"This API is ideal for travelers seeking car rentals at specific locations and times. It searches available vehicles based on pickup/drop-off details, with options to filter by car type, supplier, transmission, and amenities like air conditioning. Users receive detailed rental info including pricing, capacity, features, and supplier ratings. Results can be sorted by recommendation or price, aiding in cost-effective travel planning.\",\n\"parameters\": {\n    \"type\": \"object\",\n    \"properties\": {\n        \"pickUpId\": {\n            \"type\": \"String\",\n            \"description\": \"Pick-up location\nRequired: true\npickUpId can be retrieved from /car/auto-complete endpoint(data->id)\n\",\n            \"example_value\": \"eyJsYXRpdHVkZSI6IjQwLjc1OTU5IiwibG9uZ2l0dWRlIjoiLTczLjk4NDkxIn0=\",\n            \"required\": true\n        },\n        \"pickUpDate\": {\n            \"type\": \"Date (yyyy-mm-dd)\",\n            \"description\": \"Pick-up date\nRequired: true\nFormat: YYYY-MM-DD\nEx: 2024-01-25\",\n            \"example_value\": \"\",\n            \"required\": true\n        },\n        \"pickUpTime\": {\n            \"type\": \"Time (24-Hour Hh:Mm)\",\n            \"description\": \"Pick-up time\nRequired: true\nFormat: HH:MM\nEx: 10:00\",\n            \"example_value\": \"\",\n            \"required\": true\n        },\n        \"dropOffDate\": {\n            \"type\": \"Date (yyyy-mm-dd)\",\n            \"description\": \"Drop-off date\nRequired: true\nFormat: YYYY-MM-DD\nEx: 2024-01-26\",\n            \"example_value\": \"\",\n            \"required\": true\n        },\n        \"dropOffTime\": {\n            \"type\": \"Time (24-Hour Hh:Mm)\",\n            \"description\": \"Drop-off time\nRequired: true\nFormat: HH:MM\nEx: 10:00\",\n            \"example_value\": \"\",\n            \"required\": true\n        },\n    },\n    \"required\": [\n        \"pickUpId\",\n        \"pickUpDate\",\n        \"pickUpTime\",\n        \"dropOffDate\",\n        \"dropOffTime\"\n    ]\n}\nTarget Parameters Of Target API:\n\"pickUpTime\": {\n    \"type\": \"Time (24-Hour Hh:Mm)\",\n    \"description\": \"Pick-up time\nRequired: true\nFormat: HH:MM\nEx: 10:00\",\n    \"example_value\": \"\",\n    \"required\": true\n},\nSource API Documentation:\n{\n    \"name\": \"Search_Flights\",\n    \"endpoint\": \"/api/v1/flights/searchFlights\",\n    \"func_description\": \" \",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"fromId\": {\n                \"type\": \"String\",\n                \"description\": \"From/Departure location Id. fromId can be retrieved from api/v1/flights/searchDestination(Search Flight Location) endpoint in Flights collection as id.\",\n                \"example_value\": \"BOM.AIRPORT\",\n                \"required\": true\n            },\n            \"toId\": {\n                \"type\": \"String\",\n                \"description\": \"To/Arrival location Id. toId can be retrieved from api/v1/flights/searchDestination(Search Flight Location) endpoint in Flights collection as id.\",\n                \"example_value\": \"DEL.AIRPORT\",\n                \"required\": true\n            },\n            \"departDate\": {\n                \"type\": \"Date (yyyy-mm-dd)\",\n                \"description\": \"Departure or travel date.\nFormat: YYYY-MM-DD\",\n                \"example_value\": \"\",\n                \"required\": true\n            }\n        },\n        \"required\": [\n            \"fromId\",\n            \"toId\",\n            \"departDate\"\n        ]\n    }\n}\nList of A Source API Resopnse Field:\n[\n    {\n        \"field_name\": \"$.aggregation.flightTimes[].departure[]\",\n        \"field_example\": \"[\n            {\n                \"start\": \"00:00\",\n                \"end\": \"05:59\",\n                \"count\": 31\n            },\n            {\n                \"start\": \"06:00\",\n                \"end\": \"11:59\",\n                \"count\": 61\n            },\n            {\n                \"start\": \"12:00\",\n                \"end\": \"17:59\",\n                \"count\": 54\n            }\n        ]\n    },\n    {\n        \"field_name\": \"$.flightOffers[].segments[].legs[]\",\n        \"field_example\": \"[\n            {\n                \"departureTime\": \"2025-06-15T06:00:00\",\n                \"arrivalTime\": \"2025-06-15T07:55:00\",\n                \"legs\": [\n                    {\n                        \"departureTime\": \"2025-06-15T06:00:00\",\n                        \"arrivalTime\": \"2025-06-15T07:55:00\",\n                        \"departureAirport\": {\n                            \"type\": \"AIRPORT\",\n                            \"code\": \"BOM\",\n                            \"name\": \"Chhatrapati Shivaji International Airport Mumbai\",\n                            \"city\": \"BOM\",\n                            \"cityName\": \"Mumbai\",\n                            \"country\": \"IN\",\n                            \"countryName\": \"India\",\n                            \"province\": \"Maharashtra\"\n                        },\n                        \"arrivalAirport\": {\n                            \"type\": \"AIRPORT\",\n                            \"code\": \"DEL\",\n                            \"name\": \"Delhi International Airport\",\n                            \"city\": \"DEL\",\n                            \"cityName\": \"New Delhi\",\n                            \"country\": \"IN\",\n                            \"countryName\": \"India\"\n                        },\n                    }\n                ]\n            }\n        ]\" \n    }\n    \n]\nOutput:\n[\n    {\n        \"reason\": \"The 'pickUpTime' parameter in the target API requires a specific car rental return time (24-hour format). The source API's 'arrivalTime' field in flight segments provides exact arrival timestamps (e.g., '2025-06-15T07:55:00'). While the data types differ (timestamp vs time), the time portion can be extracted. This creates a potential business association where a traveler wants to rent a car two hours after the flight arrives.,\n        \"jsonpath\": \"$.flightOffers[].segments[].legs[].arrivalTime\",\n        \"confidence\": 90,\n        \"dependency_relationship\": \"Soft Dependency(Business-association)\"\n    },\n    {\n        \"reason\": \"The 'departure[]' time ranges represent when flights take off, which is irrelevant for determining car rental drop-off times. Even if considering a scenario where someone rents a car before departure (which contradicts the target API's purpose), these are still aggregated ranges rather than specific flight times.\",\n        \"jsonpath\": \"$.aggregation.flightTimes[].departure[]\",\n        \"confidence\": 10,\n        \"dependency_relationship\": null\n    }\n]\n\n\n#OUTPUT JSON FORMAT:\n[\n    {\n        \"target_api_params\": <<target_api_params_name>>,\n        \"reason\": <<reason>>,\n        \"source_jsonpath\": <<jsonpath>>,\n        \"confidence\": <<0-100>>,\n        \"dependency_relationship\": <<Soft Dependency(Business-association) or Hard Dependency(Prerequisite API) or null>>,\n    }\n]\n\n"}, {"role": "user", "content": "\nTarget API Documentation:\n{'name': 'Get_Seat_Map', 'endpoint': '/api/v1/flights/getSeatMap', 'func_description': None, 'parameters': {'type': 'object', 'properties': {'offerToken': {'type': 'String', 'description': 'offerToken can be retrieved from api/v1/flights/searchFlights(Search Flights) or api/v1/flights/searchFlightsMultiStops(Search Flights Multi Stops) endpoints in Flights collection as offerToken.', 'example_value': '', 'required': True}, 'currency_code': {'type': 'String', 'description': 'The currency code. currency_code can be retrieved from api/v1/meta/getCurrency(Get Currency) endpoint in Hotels collection.', 'example_value': 'AED', 'required': False}}, 'required': ['offerToken']}}\nTarget Parameters Of Target API:\nofferToken:Unique token identifying a flight offer, obtained from flight search endpoints.\nSource API Documentation:\n{'name': 'Search_Flights', 'endpoint': '/api/v1/flights/searchFlights', 'func_description': 'This API is ideal for flight booking and travel planning. It searches available flights between specified departure and arrival locations, with options to filter by stops, cabin class, and sort by best, cheapest, or fastest flights. Users receive detailed flight information including pricing, airlines, duration, and baggage policies. The location IDs must be obtained from the SearchDestination API.', 'parameters': {'type': 'object', 'properties': {'fromId': {'type': 'String', 'description': 'From/Departure location Id. fromId can be retrieved from api/v1/flights/searchDestination(Search Flight Location) endpoint in Flights collection as id.', 'example_value': 'BOM.AIRPORT', 'required': True}, 'toId': {'type': 'String', 'description': 'To/Arrival location Id. toId can be retrieved from api/v1/flights/searchDestination(Search Flight Location) endpoint in Flights collection as id.', 'example_value': 'DEL.AIRPORT', 'required': True}, 'departDate': {'type': 'Date (yyyy-mm-dd)', 'description': 'Departure or travel date.\\nFormat: YYYY-MM-DD', 'example_value': '', 'required': True}, 'returnDate': {'type': 'Date (yyyy-mm-dd)', 'description': 'Return date.\\nFormat: YYYY-MM-DD', 'example_value': '', 'required': False}, 'stops': {'type': 'Enum', 'description': 'Filters flights based on the number of stops. Accepted values are:\\nnone for no preference (returns flights with any number of stops)\\n0 for non-stop flights\\n1 for one-stop flights\\n2 for two-stop flights\\nIf provided, the value must be either none, 0, 1, or 2.', 'example_value': '', 'required': False}, 'pageNo': {'type': 'Number', 'description': 'The page number.', 'example_value': '1', 'required': False}, 'adults': {'type': 'Number', 'description': 'The number of guests who are 18 years of age or older. The default value is set to 1.', 'example_value': '1', 'required': False}, 'children': {'type': 'String', 'description': 'The number of children, including infants, who are under 18.\\nExample:\\nChild 1 Age = 8 months\\nChild 2 Age = 1 year\\nChild 3 Age = 17 years\\nHere is what the request parameter would look like:\\nchildren_age: 0,1,17', 'example_value': '0,17', 'required': False}, 'sort': {'type': 'Enum', 'description': 'This parameter orders result by BEST, CHEAPEST or FASTEST flights.', 'example_value': '', 'required': False}, 'cabinClass': {'type': 'Enum', 'description': 'Search for flights that match the cabin class specified. Cabin call can be either ECONOMY, PREMIUM_ECONOMY, BUSINESS or FIRST.', 'example_value': '', 'required': False}, 'currency_code': {'type': 'String', 'description': 'The currency code. currency_code can be retrieved from api/v1/meta/getCurrency(Get Currency) endpoint in Hotels collection.', 'example_value': 'AED', 'required': False}}, 'required': ['fromId', 'toId', 'departDate']}}\nList of most likely Source API Resopnse Fields:\n[[{'$.searchId': '18AD19EE6C7237C08953DC22C43CB5AE'}], [{'$.flightOffers[*]': {'token': 'd6a1f_H4sIAAAAAAAA_y2QUW-qMBiGf43eUSggyJLmhAEzOAEFBLebptSKOCeOdsHx608HS7-8z_N-aXrRsxB3_qSqp2tTnwVXvjmoW9HWRDBA20_11Mmo2vajudUqaTr1OYn8YAMX632sQlWRhz69_WPk3oAOnFBwyIM0djc4T8Mt3qahF8arOXsIhXcUzZuKAYIUx3Em5RRt3eWfd8gCi7DIynK1G1e0FcgE1jItg-IA18W07NBqu06z1diOKPJ5nwzvz8kQGskPzPYXricv60NavB-yD7pIhsDI4I5H-XFTeP0j1sR-4wdG7rt26fVD7PUib3oR7WaGL2d8llGKIACm7cCxt4Qje_nnVCCoTXoUKCvDZZhNVSDLts3RHwgalu7MObsyKpr29sp-kBXYlq7Iz_u-6QvlbaZ7xK4u8EvKzHDl1FiTeR6TYPcXFTYjCTrhiKFmMF0aw2ZFJE_YlNlgCDTwe_-Cw1JiwBa5W9r1Pwf9p-fhAQAA', 'segments': [{'departureAirport': {'type': 'AIRPORT', 'code': 'BOM', 'name': 'Chhatrapati Shivaji International Airport Mumbai', 'city': 'BOM', 'cityName': 'Mumbai', 'country': 'IN', 'countryName': 'India', 'province': 'Maharashtra'}, 'arrivalAirport': {'type': 'AIRPORT', 'code': 'DEL', 'name': 'Delhi International Airport', 'city': 'DEL', 'cityName': 'New Delhi', 'country': 'IN', 'countryName': 'India'}, 'departureTime': '2025-06-15T06:00:00', 'arrivalTime': '2025-06-15T07:55:00', 'legs': [{'departureTime': '2025-06-15T06:00:00', 'arrivalTime': '2025-06-15T07:55:00', 'departureAirport': {'type': 'AIRPORT', 'code': 'BOM', 'name': 'Chhatrapati Shivaji International Airport Mumbai', 'city': 'BOM', 'cityName': 'Mumbai', 'country': 'IN', 'countryName': 'India', 'province': 'Maharashtra'}, 'arrivalAirport': {'type': 'AIRPORT', 'code': 'DEL', 'name': 'Delhi International Airport', 'city': 'DEL', 'cityName': 'New Delhi', 'country': 'IN', 'countryName': 'India'}, 'cabinClass': 'ECONOMY', 'flightInfo': {'facilities': [], 'flightNumber': 762, 'planeType': '', 'carrierInfo': {'operatingCarrier': '6E', 'marketingCarrier': '6E', 'operatingCarrierDisclosureText': ''}}, 'carriers': ['6E', '6E'], 'carriersData': [{'name': 'IndiGo', 'code': '6E', 'logo': 'https://r-xx.bstatic.com/data/airlines_logo/6E.png'}, {'name': 'IndiGo', 'code': '6E', 'logo': 'https://r-xx.bstatic.com/data/airlines_logo/6E.png'}], 'totalTime': 6900, 'flightStops': [], 'amenities': []}], 'totalTime': 6900, 'travellerCheckedLuggage': [{'travellerReference': '1', 'luggageAllowance': {'luggageType': 'CHECKED_IN', 'ruleType': 'PIECE_BASED', 'maxPiece': 1, 'maxWeightPerPiece': 33.1, 'massUnit': 'LB'}}], 'travellerCabinLuggage': [{'travellerReference': '1', 'luggageAllowance': {'luggageType': 'HAND', 'maxPiece': 1, 'maxWeightPerPiece': 15.4, 'massUnit': 'LB', 'sizeRestrictions': {'maxLength': 21.7, 'maxWidth': 13.8, 'maxHeight': 9.8, 'sizeUnit': 'INCH'}}, 'personalItem': True}], 'isAtolProtected': False, 'showWarningDestinationAirport': False, 'showWarningOriginAirport': False}], 'priceBreakdown': {'total': {'currencyCode': 'USD', 'units': 67, 'nanos': 740000000}, 'baseFare': {'currencyCode': 'USD', 'units': 57, 'nanos': 730000000}, 'fee': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'tax': {'currencyCode': 'USD', 'units': 10, 'nanos': 10000000}, 'totalRounded': {'currencyCode': 'USD', 'nanos': 0, 'units': 68}, 'discount': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'totalWithoutDiscount': {'currencyCode': 'USD', 'units': 67, 'nanos': 740000000}, 'totalWithoutDiscountRounded': {'currencyCode': 'USD', 'nanos': 0, 'units': 68}, 'carrierTaxBreakdown': [{'carrier': {'name': 'IndiGo', 'code': '6E', 'logo': 'https://r-xx.bstatic.com/data/airlines_logo/6E.png'}, 'avgPerAdult': {'currencyCode': 'USD', 'units': 10, 'nanos': 10000000}}]}, 'travellerPrices': [{'travellerPriceBreakdown': {'total': {'currencyCode': 'USD', 'units': 67, 'nanos': 740000000}, 'baseFare': {'currencyCode': 'USD', 'units': 57, 'nanos': 730000000}, 'fee': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'tax': {'currencyCode': 'USD', 'units': 10, 'nanos': 10000000}, 'totalRounded': {'currencyCode': 'USD', 'nanos': 0, 'units': 68}, 'discount': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'totalWithoutDiscount': {'currencyCode': 'USD', 'units': 67, 'nanos': 740000000}, 'totalWithoutDiscountRounded': {'currencyCode': 'USD', 'nanos': 0, 'units': 68}}, 'travellerReference': '1', 'travellerType': 'ADULT'}], 'priceDisplayRequirements': [], 'pointOfSale': 'us', 'tripType': 'ONEWAY', 'posMismatch': {'detectedPointOfSale': 'us', 'isPOSMismatch': False, 'offerSalesCountry': 'us'}, 'includedProductsBySegment': [[{'travellerReference': '1', 'travellerProducts': [{'type': 'checkedInBaggage', 'product': {'luggageType': 'CHECKED_IN', 'ruleType': 'PIECE_BASED', 'maxPiece': 1, 'maxWeightPerPiece': 33.1, 'massUnit': 'LB'}}, {'type': 'cabinBaggage', 'product': {'luggageType': 'HAND', 'maxPiece': 1, 'maxWeightPerPiece': 15.4, 'massUnit': 'LB', 'sizeRestrictions': {'maxLength': 21.7, 'maxWidth': 13.8, 'maxHeight': 9.8, 'sizeUnit': 'INCH'}}}]}]], 'includedProducts': {'areAllSegmentsIdentical': True, 'segments': [[{'luggageType': 'PERSONAL_ITEM', 'maxPiece': 1, 'piecePerPax': 1}, {'luggageType': 'HAND', 'maxPiece': 1, 'maxWeightPerPiece': 15.4, 'massUnit': 'LB', 'sizeRestrictions': {'maxLength': 21.7, 'maxWidth': 13.8, 'maxHeight': 9.8, 'sizeUnit': 'INCH'}, 'piecePerPax': 1}]]}, 'extraProducts': [{'type': 'flexibleTicket', 'priceBreakdown': {'total': {'currencyCode': 'USD', 'units': 11, 'nanos': 80000000}, 'baseFare': {'currencyCode': 'USD', 'units': 11, 'nanos': 80000000}, 'fee': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'tax': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'discount': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'totalWithoutDiscount': {'currencyCode': 'USD', 'units': 11, 'nanos': 80000000}}}], 'offerExtras': {'flexibleTicket': {'airProductReference': 'n/a', 'travellers': ['1'], 'recommendation': {'recommended': False, 'confidence': 'UNKNOWN_LEVEL'}, 'priceBreakdown': {'total': {'currencyCode': 'USD', 'units': 11, 'nanos': 80000000}, 'baseFare': {'currencyCode': 'USD', 'units': 11, 'nanos': 80000000}, 'fee': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'tax': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'totalRounded': {'currencyCode': 'USD', 'nanos': 0, 'units': 12}, 'discount': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'totalWithoutDiscount': {'currencyCode': 'USD', 'units': 11, 'nanos': 80000000}, 'totalWithoutDiscountRounded': {'currencyCode': 'USD', 'nanos': 0, 'units': 12}}, 'supplierInfo': {'name': 'Gotogate, Inc.', 'termsUrl': 'https://flights-us.gotogate.com/rf/travel-conditions', 'privacyPolicyUrl': 'https://flights-us.gotogate.com/rf/privacy-policy'}}}, 'ancillaries': {'flexibleTicket': {'airProductReference': 'n/a', 'travellers': ['1'], 'priceBreakdown': {'total': {'currencyCode': 'USD', 'units': 11, 'nanos': 80000000}, 'baseFare': {'currencyCode': 'USD', 'units': 11, 'nanos': 80000000}, 'fee': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'tax': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'discount': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'totalWithoutDiscount': {'currencyCode': 'USD', 'units': 11, 'nanos': 80000000}}, 'preSelected': False, 'recommendation': {'recommended': False, 'confidence': 'UNKNOWN_LEVEL'}, 'supplierInfo': {'name': 'Gotogate, Inc.', 'termsUrl': 'https://flights-us.gotogate.com/rf/travel-conditions', 'privacyPolicyUrl': 'https://flights-us.gotogate.com/rf/privacy-policy'}}}, 'appliedDiscounts': [], 'offerKeyToHighlight': '1_6E762.BOM20250615', 'extraProductDisplayRequirements': {}, 'unifiedPriceBreakdown': {'price': {'currencyCode': 'USD', 'units': 67, 'nanos': 740000000}, 'items': [{'scope': 'FLIGHT_ADULT', 'id': 'flight_adult', 'title': 'Adult (1)', 'price': {'currencyCode': 'USD', 'units': 67, 'nanos': 740000000}, 'items': [{'id': 'flight_adult-basefare', 'title': 'Flight fare', 'price': {'currencyCode': 'USD', 'units': 57, 'nanos': 730000000}, 'items': []}, {'id': 'flight_adult-tax', 'title': 'Taxes and airline fees', 'price': {'currencyCode': 'USD', 'units': 10, 'nanos': 10000000}, 'items': []}]}], 'addedItems': []}}}, {'$.flightOffers[*]': {'token': 'd6a1f_H4sIAAAAAAAA_y2QbW-CMBRGf41-o1BeZUmzOGAGJ6CA4valKbUCmxNDa3D8-nWw9OY5596kzU1rIW78SVXPl6aqBVfuHFStaCsiGKDtt3ruZJRt-9VcK5U0nfqSRH6wgdZ6H6tQVeShT-_PjNwa0IEzCo55kMbLDc7TcIu3aeiF8WrOHkLhHUXzpmSAIMV13Uk5Rdvl4t87ZAMrPGRFsdqNI9oKZAJ7kRbB4QjX2TTs0Gq7TrPV2J1Q5PM-GT5ekiE0kh-Y7T-5nryuj-nh45h9USsZAiODOx7lp83B6x-xJvYbPzByf-kUXj_EXi_yphfRbmb4ssZnGaUIAmA6Lhz7lnDkLP6dCgS1SU8CZUW4CKfV5Lq245ijPxA0bN2dc3ZhVDTt9Y39IDvQHcdS5O_dr7qlvM90r3RrUj-kzIylrAprMusxCdYNiRKbkQSdcMJQM5gujWGzJJJnbMpsMAQa-Lv2icNCYsA2udna5RfxNcmE4gEAAA..', 'segments': [{'departureAirport': {'type': 'AIRPORT', 'code': 'BOM', 'name': 'Chhatrapati Shivaji International Airport Mumbai', 'city': 'BOM', 'cityName': 'Mumbai', 'country': 'IN', 'countryName': 'India', 'province': 'Maharashtra'}, 'arrivalAirport': {'type': 'AIRPORT', 'code': 'DEL', 'name': 'Delhi International Airport', 'city': 'DEL', 'cityName': 'New Delhi', 'country': 'IN', 'countryName': 'India'}, 'departureTime': '2025-06-15T01:15:00', 'arrivalTime': '2025-06-15T03:15:00', 'legs': [{'departureTime': '2025-06-15T01:15:00', 'arrivalTime': '2025-06-15T03:15:00', 'departureAirport': {'type': 'AIRPORT', 'code': 'BOM', 'name': 'Chhatrapati Shivaji International Airport Mumbai', 'city': 'BOM', 'cityName': 'Mumbai', 'country': 'IN', 'countryName': 'India', 'province': 'Maharashtra'}, 'arrivalAirport': {'type': 'AIRPORT', 'code': 'DEL', 'name': 'Delhi International Airport', 'city': 'DEL', 'cityName': 'New Delhi', 'country': 'IN', 'countryName': 'India'}, 'cabinClass': 'ECONOMY', 'flightInfo': {'facilities': [], 'flightNumber': 2775, 'planeType': '', 'carrierInfo': {'operatingCarrier': '6E', 'marketingCarrier': '6E', 'operatingCarrierDisclosureText': ''}}, 'carriers': ['6E', '6E'], 'carriersData': [{'name': 'IndiGo', 'code': '6E', 'logo': 'https://r-xx.bstatic.com/data/airlines_logo/6E.png'}, {'name': 'IndiGo', 'code': '6E', 'logo': 'https://r-xx.bstatic.com/data/airlines_logo/6E.png'}], 'totalTime': 7200, 'flightStops': [], 'amenities': []}], 'totalTime': 7200, 'travellerCheckedLuggage': [{'travellerReference': '1', 'luggageAllowance': {'luggageType': 'CHECKED_IN', 'ruleType': 'PIECE_BASED', 'maxPiece': 1, 'maxWeightPerPiece': 33.1, 'massUnit': 'LB'}}], 'travellerCabinLuggage': [{'travellerReference': '1', 'luggageAllowance': {'luggageType': 'HAND', 'maxPiece': 1, 'maxWeightPerPiece': 15.4, 'massUnit': 'LB', 'sizeRestrictions': {'maxLength': 21.7, 'maxWidth': 13.8, 'maxHeight': 9.8, 'sizeUnit': 'INCH'}}, 'personalItem': True}], 'isAtolProtected': False, 'showWarningDestinationAirport': False, 'showWarningOriginAirport': False}], 'priceBreakdown': {'total': {'currencyCode': 'USD', 'units': 67, 'nanos': 740000000}, 'baseFare': {'currencyCode': 'USD', 'units': 57, 'nanos': 730000000}, 'fee': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'tax': {'currencyCode': 'USD', 'units': 10, 'nanos': 10000000}, 'totalRounded': {'currencyCode': 'USD', 'nanos': 0, 'units': 68}, 'discount': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'totalWithoutDiscount': {'currencyCode': 'USD', 'units': 67, 'nanos': 740000000}, 'totalWithoutDiscountRounded': {'currencyCode': 'USD', 'nanos': 0, 'units': 68}, 'carrierTaxBreakdown': [{'carrier': {'name': 'IndiGo', 'code': '6E', 'logo': 'https://r-xx.bstatic.com/data/airlines_logo/6E.png'}, 'avgPerAdult': {'currencyCode': 'USD', 'units': 10, 'nanos': 10000000}}]}, 'travellerPrices': [{'travellerPriceBreakdown': {'total': {'currencyCode': 'USD', 'units': 67, 'nanos': 740000000}, 'baseFare': {'currencyCode': 'USD', 'units': 57, 'nanos': 730000000}, 'fee': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'tax': {'currencyCode': 'USD', 'units': 10, 'nanos': 10000000}, 'totalRounded': {'currencyCode': 'USD', 'nanos': 0, 'units': 68}, 'discount': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'totalWithoutDiscount': {'currencyCode': 'USD', 'units': 67, 'nanos': 740000000}, 'totalWithoutDiscountRounded': {'currencyCode': 'USD', 'nanos': 0, 'units': 68}}, 'travellerReference': '1', 'travellerType': 'ADULT'}], 'priceDisplayRequirements': [], 'pointOfSale': 'us', 'tripType': 'ONEWAY', 'posMismatch': {'detectedPointOfSale': 'us', 'isPOSMismatch': False, 'offerSalesCountry': 'us'}, 'includedProductsBySegment': [[{'travellerReference': '1', 'travellerProducts': [{'type': 'checkedInBaggage', 'product': {'luggageType': 'CHECKED_IN', 'ruleType': 'PIECE_BASED', 'maxPiece': 1, 'maxWeightPerPiece': 33.1, 'massUnit': 'LB'}}, {'type': 'cabinBaggage', 'product': {'luggageType': 'HAND', 'maxPiece': 1, 'maxWeightPerPiece': 15.4, 'massUnit': 'LB', 'sizeRestrictions': {'maxLength': 21.7, 'maxWidth': 13.8, 'maxHeight': 9.8, 'sizeUnit': 'INCH'}}}]}]], 'includedProducts': {'areAllSegmentsIdentical': True, 'segments': [[{'luggageType': 'PERSONAL_ITEM', 'maxPiece': 1, 'piecePerPax': 1}, {'luggageType': 'HAND', 'maxPiece': 1, 'maxWeightPerPiece': 15.4, 'massUnit': 'LB', 'sizeRestrictions': {'maxLength': 21.7, 'maxWidth': 13.8, 'maxHeight': 9.8, 'sizeUnit': 'INCH'}, 'piecePerPax': 1}]]}, 'extraProducts': [{'type': 'flexibleTicket', 'priceBreakdown': {'total': {'currencyCode': 'USD', 'units': 11, 'nanos': 80000000}, 'baseFare': {'currencyCode': 'USD', 'units': 11, 'nanos': 80000000}, 'fee': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'tax': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'discount': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'totalWithoutDiscount': {'currencyCode': 'USD', 'units': 11, 'nanos': 80000000}}}], 'offerExtras': {'flexibleTicket': {'airProductReference': 'n/a', 'travellers': ['1'], 'recommendation': {'recommended': False, 'confidence': 'UNKNOWN_LEVEL'}, 'priceBreakdown': {'total': {'currencyCode': 'USD', 'units': 11, 'nanos': 80000000}, 'baseFare': {'currencyCode': 'USD', 'units': 11, 'nanos': 80000000}, 'fee': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'tax': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'totalRounded': {'currencyCode': 'USD', 'nanos': 0, 'units': 12}, 'discount': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'totalWithoutDiscount': {'currencyCode': 'USD', 'units': 11, 'nanos': 80000000}, 'totalWithoutDiscountRounded': {'currencyCode': 'USD', 'nanos': 0, 'units': 12}}, 'supplierInfo': {'name': 'Gotogate, Inc.', 'termsUrl': 'https://flights-us.gotogate.com/rf/travel-conditions', 'privacyPolicyUrl': 'https://flights-us.gotogate.com/rf/privacy-policy'}}}, 'ancillaries': {'flexibleTicket': {'airProductReference': 'n/a', 'travellers': ['1'], 'priceBreakdown': {'total': {'currencyCode': 'USD', 'units': 11, 'nanos': 80000000}, 'baseFare': {'currencyCode': 'USD', 'units': 11, 'nanos': 80000000}, 'fee': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'tax': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'discount': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'totalWithoutDiscount': {'currencyCode': 'USD', 'units': 11, 'nanos': 80000000}}, 'preSelected': False, 'recommendation': {'recommended': False, 'confidence': 'UNKNOWN_LEVEL'}, 'supplierInfo': {'name': 'Gotogate, Inc.', 'termsUrl': 'https://flights-us.gotogate.com/rf/travel-conditions', 'privacyPolicyUrl': 'https://flights-us.gotogate.com/rf/privacy-policy'}}}, 'appliedDiscounts': [], 'offerKeyToHighlight': '1_6E2775.BOM20250615', 'extraProductDisplayRequirements': {}, 'unifiedPriceBreakdown': {'price': {'currencyCode': 'USD', 'units': 67, 'nanos': 740000000}, 'items': [{'scope': 'FLIGHT_ADULT', 'id': 'flight_adult', 'title': 'Adult (1)', 'price': {'currencyCode': 'USD', 'units': 67, 'nanos': 740000000}, 'items': [{'id': 'flight_adult-basefare', 'title': 'Flight fare', 'price': {'currencyCode': 'USD', 'units': 57, 'nanos': 730000000}, 'items': []}, {'id': 'flight_adult-tax', 'title': 'Taxes and airline fees', 'price': {'currencyCode': 'USD', 'units': 10, 'nanos': 10000000}, 'items': []}]}], 'addedItems': []}}}], [{'$.baggagePolicies[*]': {'code': 'AI', 'name': 'Air India', 'url': 'http://www.airindia.in/baggage.htm'}}, {'$.baggagePolicies[*]': {'code': '6E', 'name': 'IndiGo', 'url': 'https://www.goindigo.in/baggage.html'}}], [{'$.aggregation': {'totalCount': 203, 'filteredTotalCount': 203, 'stops': [{'numberOfStops': 0, 'count': 51, 'minPrice': {'currencyCode': 'USD', 'units': 67, 'nanos': 740000000}, 'minPriceRound': {'currencyCode': 'USD', 'units': 68, 'nanos': 0}}, {'numberOfStops': 1, 'count': 195, 'minPrice': {'currencyCode': 'USD', 'units': 67, 'nanos': 710000000}, 'minPriceRound': {'currencyCode': 'USD', 'units': 68, 'nanos': 0}}], 'airlines': [{'name': 'Air India', 'logoUrl': 'https://r-xx.bstatic.com/data/airlines_logo/AI.png', 'iataCode': 'AI', 'count': 115, 'minPrice': {'currencyCode': 'USD', 'units': 71, 'nanos': 100000000}}, {'name': 'IndiGo', 'logoUrl': 'https://r-xx.bstatic.com/data/airlines_logo/6E.png', 'iataCode': '6E', 'count': 55, 'minPrice': {'currencyCode': 'USD', 'units': 67, 'nanos': 710000000}}], 'departureIntervals': [{'start': '00:35', 'end': '23:45'}], 'flightTimes': [{'arrival': [{'start': '00:00', 'end': '05:59', 'count': 43}, {'start': '06:00', 'end': '11:59', 'count': 53}], 'departure': [{'start': '00:00', 'end': '05:59', 'count': 31}, {'start': '06:00', 'end': '11:59', 'count': 61}]}], 'shortLayoverConnection': {'count': 58}, 'durationMin': 2, 'durationMax': 30, 'minPrice': {'currencyCode': 'USD', 'units': 67, 'nanos': 710000000}, 'minRoundPrice': {'currencyCode': 'USD', 'units': 68, 'nanos': 0}, 'minPriceFiltered': {'currencyCode': 'USD', 'units': 67, 'nanos': 710000000}, 'baggage': [{'paramName': 'includedBaggage', 'count': 195, 'enabled': True, 'baggageType': 'CABIN'}, {'paramName': 'includedBaggage', 'count': 170, 'enabled': True, 'baggageType': 'CHECKIN'}], 'budget': {'paramName': 'maxBudget', 'min': {'currencyCode': 'USD', 'units': 67, 'nanos': 710000000}, 'max': {'currencyCode': 'USD', 'units': 1085, 'nanos': 60000000}}, 'budgetPerAdult': {'paramName': 'maxBudgetPerAdult', 'min': {'currencyCode': 'USD', 'units': 67, 'nanos': 710000000}, 'max': {'currencyCode': 'USD', 'units': 1085, 'nanos': 60000000}}, 'duration': [{'min': 2, 'max': 30, 'durationType': 'JOURNEY', 'enabled': True, 'paramName': 'maxDuration'}, {'min': 1, 'max': 24, 'durationType': 'LAYOVER', 'enabled': True, 'paramName': 'maxLayoverDuration'}], 'filtersOrder': ['stops', 'airlines']}}], [{'$.flightDeals[*]': {'key': 'CHEAPEST', 'offerToken': 'd6a1f_H4sIAAAAAAAA_0WQXW-CMBSGf43eUSifsqRZmFTHBFRA0N00WCqyMTG0RuevXyMmS5vzPOfNOb3oUYgzf1HVQ9vUR8GVCwd1J7q6FAzQ7kc99LLsu-67OdVq2fTq2zLycQitj02sQlWRh77sXll5bkAPDghvM5zEXkiyJFiRVRJMg3g-Zjeh8J6icbNnoESK67qDcopW3uTpPbKBFeRpUczXj4h2ApnAniQFzrdwMRvCHs0Tf-vNH12Foun1urx7PPK5vs74b3znYtMGTvx1THMtL3Lt_L7M-C3WxCb0sZHCNY-yKsynV5nJXVjz6L7mYY55mOGR4T8eZpQiCIDpuPDRdyVHzuTpVCCoDVoJlBbBJEiHViDbcYapG4KGrbtjzlpGRdOdFuwX2dg0bUV-3-WkW8qO2NjSHPc_GOlTaEHYtqa0keHJWxMNaJLHJ0viLcDsU9qemJEEHVARqBlMl8aI6VLJAzFlbQgEw-YXCQqJO7Eqy2rLP1uFPPP8AQAA', 'price': {'currencyCode': 'USD', 'units': 67, 'nanos': 710000000}, 'priceRounded': {'currencyCode': 'USD', 'units': 68, 'nanos': 0}, 'travellerPrices': [{'travellerPriceBreakdown': {'total': {'currencyCode': 'USD', 'units': 67, 'nanos': 710000000}, 'baseFare': {'currencyCode': 'USD', 'units': 57, 'nanos': 110000000}, 'fee': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'tax': {'currencyCode': 'USD', 'units': 10, 'nanos': 600000000}, 'totalRounded': {'currencyCode': 'USD', 'nanos': 0, 'units': 68}, 'discount': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'totalWithoutDiscount': {'currencyCode': 'USD', 'units': 67, 'nanos': 710000000}, 'totalWithoutDiscountRounded': {'currencyCode': 'USD', 'nanos': 0, 'units': 68}}, 'travellerReference': '1', 'travellerType': 'ADULT'}]}}, {'$.flightDeals[*]': {'key': 'FASTEST', 'offerToken': 'd6a1f_H4sIAAAAAAAA_y2QUW-qMBiGf43eUSggyJLmhAEzOAEFBLebptSKOCeOdsHx608HS7-8z_N-aXrRsxB3_qSqp2tTnwVXvjmoW9HWRDBA20_11Mmo2vajudUqaTr1OYn8YAMX632sQlWRhz69_WPk3oAOnFBwyIM0djc4T8Mt3qahF8arOXsIhXcUzZuKAYIUx3Em5RRt3eWfd8gCi7DIynK1G1e0FcgE1jItg-IA18W07NBqu06z1diOKPJ5nwzvz8kQGskPzPYXricv60NavB-yD7pIhsDI4I5H-XFTeP0j1sR-4wdG7rt26fVD7PUib3oR7WaGL2d8llGKIACm7cCxt4Qje_nnVCCoTXoUKCvDZZhNVSDLts3RHwgalu7MObsyKpr29sp-kBXYlq7Iz_u-6QvlbaZ7xK4u8EvKzHDl1FiTeR6TYPcXFTYjCTrhiKFmMF0aw2ZFJE_YlNlgCDTwe_-Cw1JiwBa5W9r1Pwf9p-fhAQAA', 'price': {'currencyCode': 'USD', 'units': 67, 'nanos': 740000000}, 'priceRounded': {'currencyCode': 'USD', 'units': 68, 'nanos': 0}, 'travellerPrices': [{'travellerPriceBreakdown': {'total': {'currencyCode': 'USD', 'units': 67, 'nanos': 740000000}, 'baseFare': {'currencyCode': 'USD', 'units': 57, 'nanos': 730000000}, 'fee': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'tax': {'currencyCode': 'USD', 'units': 10, 'nanos': 10000000}, 'totalRounded': {'currencyCode': 'USD', 'nanos': 0, 'units': 68}, 'discount': {'currencyCode': 'USD', 'units': 0, 'nanos': 0}, 'totalWithoutDiscount': {'currencyCode': 'USD', 'units': 67, 'nanos': 740000000}, 'totalWithoutDiscountRounded': {'currencyCode': 'USD', 'nanos': 0, 'units': 68}}, 'travellerReference': '1', 'travellerType': 'ADULT'}]}}]]\nOUTPUT:\n"}]
2025-06-13 19:22:38,534 - logger_Get_Seat_Map - INFO - Search_Flights---output
:[{'target_api_params': 'offerToken', 'reason': "The 'offerToken' parameter in the target API requires a unique token identifying a flight offer, which is exactly what the 'token' field in the source API's flightOffers response provides. This is a direct match in terms of both data type and purpose, as the target API explicitly states that the offerToken can be retrieved from the searchFlights endpoint.", 'source_jsonpath': '$.flightOffers[*].token', 'confidence': 100, 'dependency_relationship': 'Hard Dependency(Prerequisite API)'}, {'target_api_params': 'offerToken', 'reason': "The 'searchId' field in the source API's response is a unique identifier for the search operation, not for individual flight offers. It does not match the requirement of the 'offerToken' parameter in the target API, which needs a token specific to a flight offer.", 'source_jsonpath': '$.searchId', 'confidence': 10, 'dependency_relationship': None}, {'target_api_params': 'offerToken', 'reason': "The 'offerToken' field in the flightDeals response is a valid token for flight offers, similar to the token in flightOffers. However, it is part of a separate section in the response that aggregates deals, and while it could technically be used, the direct flightOffers token is more appropriate.", 'source_jsonpath': '$.flightDeals[*].offerToken', 'confidence': 80, 'dependency_relationship': 'Hard Dependency(Prerequisite API)'}]
2025-06-13 19:22:38,549 - logger_Get_Seat_Map - INFO - messages
:[{"role": "system", "content": "\n#ROLE:\nYou are a professional API Dependency Evaluator. Your task is to analyze whether response fields from source APIs can serve as valid input parameters for a target API.\n\n#INPUT:\n1. Target API Documentation\n2. Target Parameters Of Target API(One input parameter you need to focus on)\n3. Source API Documentation\n4. List of most likely Source API Resopnse Fields\n\n#RULES:\n1. Carefully read the target API documentation to clearly understand the input parameter requirements of the target API, especially the parameter being focused on.\n2. Analyze the response fields of the source API to determine whether there is a business association with the target API parameter(Soft Dependence) or If it is a necessary prerequisite for calling the target API(Hard Dependence).The departure time of the flight is often related to the car rental drop-off time, while the arrival time of the flight is typically associated with the car rental pick-up time.\n3. Based on the context of the source API's response example, determine which specific field of the source API can be used as input for the target parameters of target api.\n4. Pay attention to whether the data type of the API's response field matches the data type of the target API's parameter.However, sometimes even though the data types do not match exactly, the response field of the source API may contain the information required by the target API parameter. For example, a field with the format \"yyy-mm-dd Hh-Mm\" may include the value needed for the pickUpTime parameter (which expects the format \"24-Hour Hh:Mm\"). In such cases, it is important to carefully examine the example values from the response fields to determine if they can be appropriately adapted or extracted for use as input parameters.\n\n#OUTPUT:\n1. Provide a confidence score between 0-100 for each judgment. If the confidence is below 80, set the dependency relationship to null.\n2. Provide reasons. The reasons should first analyze the meanings of the fields and parameters, determine whether the types match, and consider whether there are reasonable scenarios where the output field of the source API could serve as the input parameter of the target API, paying attention to the causal sequence. If no, reasons are given.\n\n\n#Example:\n\nExample1:\nTarget API Documentation:\n{\n\"name\": \"Car_Search\",\n\"func_description\": \"This API is ideal for travelers seeking car rentals at specific locations and times. It searches available vehicles based on pickup/drop-off details, with options to filter by car type, supplier, transmission, and amenities like air conditioning. Users receive detailed rental info including pricing, capacity, features, and supplier ratings. Results can be sorted by recommendation or price, aiding in cost-effective travel planning.\",\n\"parameters\": {\n    \"type\": \"object\",\n    \"properties\": {\n        \"pickUpId\": {\n            \"type\": \"String\",\n            \"description\": \"Pick-up location\nRequired: true\npickUpId can be retrieved from /car/auto-complete endpoint(data->id)\n\",\n            \"example_value\": \"eyJsYXRpdHVkZSI6IjQwLjc1OTU5IiwibG9uZ2l0dWRlIjoiLTczLjk4NDkxIn0=\",\n            \"required\": true\n        },\n        \"pickUpDate\": {\n            \"type\": \"Date (yyyy-mm-dd)\",\n            \"description\": \"Pick-up date\nRequired: true\nFormat: YYYY-MM-DD\nEx: 2024-01-25\",\n            \"example_value\": \"\",\n            \"required\": true\n        },\n        \"pickUpTime\": {\n            \"type\": \"Time (24-Hour Hh:Mm)\",\n            \"description\": \"Pick-up time\nRequired: true\nFormat: HH:MM\nEx: 10:00\",\n            \"example_value\": \"\",\n            \"required\": true\n        },\n        \"dropOffDate\": {\n            \"type\": \"Date (yyyy-mm-dd)\",\n            \"description\": \"Drop-off date\nRequired: true\nFormat: YYYY-MM-DD\nEx: 2024-01-26\",\n            \"example_value\": \"\",\n            \"required\": true\n        },\n        \"dropOffTime\": {\n            \"type\": \"Time (24-Hour Hh:Mm)\",\n            \"description\": \"Drop-off time\nRequired: true\nFormat: HH:MM\nEx: 10:00\",\n            \"example_value\": \"\",\n            \"required\": true\n        },\n    },\n    \"required\": [\n        \"pickUpId\",\n        \"pickUpDate\",\n        \"pickUpTime\",\n        \"dropOffDate\",\n        \"dropOffTime\"\n    ]\n}\nTarget Parameters Of Target API:\n\"pickUpTime\": {\n    \"type\": \"Time (24-Hour Hh:Mm)\",\n    \"description\": \"Pick-up time\nRequired: true\nFormat: HH:MM\nEx: 10:00\",\n    \"example_value\": \"\",\n    \"required\": true\n},\nSource API Documentation:\n{\n    \"name\": \"Search_Flights\",\n    \"endpoint\": \"/api/v1/flights/searchFlights\",\n    \"func_description\": \" \",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"fromId\": {\n                \"type\": \"String\",\n                \"description\": \"From/Departure location Id. fromId can be retrieved from api/v1/flights/searchDestination(Search Flight Location) endpoint in Flights collection as id.\",\n                \"example_value\": \"BOM.AIRPORT\",\n                \"required\": true\n            },\n            \"toId\": {\n                \"type\": \"String\",\n                \"description\": \"To/Arrival location Id. toId can be retrieved from api/v1/flights/searchDestination(Search Flight Location) endpoint in Flights collection as id.\",\n                \"example_value\": \"DEL.AIRPORT\",\n                \"required\": true\n            },\n            \"departDate\": {\n                \"type\": \"Date (yyyy-mm-dd)\",\n                \"description\": \"Departure or travel date.\nFormat: YYYY-MM-DD\",\n                \"example_value\": \"\",\n                \"required\": true\n            }\n        },\n        \"required\": [\n            \"fromId\",\n            \"toId\",\n            \"departDate\"\n        ]\n    }\n}\nList of A Source API Resopnse Field:\n[\n    {\n        \"field_name\": \"$.aggregation.flightTimes[].departure[]\",\n        \"field_example\": \"[\n            {\n                \"start\": \"00:00\",\n                \"end\": \"05:59\",\n                \"count\": 31\n            },\n            {\n                \"start\": \"06:00\",\n                \"end\": \"11:59\",\n                \"count\": 61\n            },\n            {\n                \"start\": \"12:00\",\n                \"end\": \"17:59\",\n                \"count\": 54\n            }\n        ]\n    },\n    {\n        \"field_name\": \"$.flightOffers[].segments[].legs[]\",\n        \"field_example\": \"[\n            {\n                \"departureTime\": \"2025-06-15T06:00:00\",\n                \"arrivalTime\": \"2025-06-15T07:55:00\",\n                \"legs\": [\n                    {\n                        \"departureTime\": \"2025-06-15T06:00:00\",\n                        \"arrivalTime\": \"2025-06-15T07:55:00\",\n                        \"departureAirport\": {\n                            \"type\": \"AIRPORT\",\n                            \"code\": \"BOM\",\n                            \"name\": \"Chhatrapati Shivaji International Airport Mumbai\",\n                            \"city\": \"BOM\",\n                            \"cityName\": \"Mumbai\",\n                            \"country\": \"IN\",\n                            \"countryName\": \"India\",\n                            \"province\": \"Maharashtra\"\n                        },\n                        \"arrivalAirport\": {\n                            \"type\": \"AIRPORT\",\n                            \"code\": \"DEL\",\n                            \"name\": \"Delhi International Airport\",\n                            \"city\": \"DEL\",\n                            \"cityName\": \"New Delhi\",\n                            \"country\": \"IN\",\n                            \"countryName\": \"India\"\n                        },\n                    }\n                ]\n            }\n        ]\" \n    }\n    \n]\nOutput:\n[\n    {\n        \"reason\": \"The 'pickUpTime' parameter in the target API requires a specific car rental return time (24-hour format). The source API's 'arrivalTime' field in flight segments provides exact arrival timestamps (e.g., '2025-06-15T07:55:00'). While the data types differ (timestamp vs time), the time portion can be extracted. This creates a potential business association where a traveler wants to rent a car two hours after the flight arrives.,\n        \"jsonpath\": \"$.flightOffers[].segments[].legs[].arrivalTime\",\n        \"confidence\": 90,\n        \"dependency_relationship\": \"Soft Dependency(Business-association)\"\n    },\n    {\n        \"reason\": \"The 'departure[]' time ranges represent when flights take off, which is irrelevant for determining car rental drop-off times. Even if considering a scenario where someone rents a car before departure (which contradicts the target API's purpose), these are still aggregated ranges rather than specific flight times.\",\n        \"jsonpath\": \"$.aggregation.flightTimes[].departure[]\",\n        \"confidence\": 10,\n        \"dependency_relationship\": null\n    }\n]\n\n\n#OUTPUT JSON FORMAT:\n[\n    {\n        \"target_api_params\": <<target_api_params_name>>,\n        \"reason\": <<reason>>,\n        \"source_jsonpath\": <<jsonpath>>,\n        \"confidence\": <<0-100>>,\n        \"dependency_relationship\": <<Soft Dependency(Business-association) or Hard Dependency(Prerequisite API) or null>>,\n    }\n]\n\n"}, {"role": "user", "content": "\nTarget API Documentation:\n{'name': 'Get_Seat_Map', 'endpoint': '/api/v1/flights/getSeatMap', 'func_description': None, 'parameters': {'type': 'object', 'properties': {'offerToken': {'type': 'String', 'description': 'offerToken can be retrieved from api/v1/flights/searchFlights(Search Flights) or api/v1/flights/searchFlightsMultiStops(Search Flights Multi Stops) endpoints in Flights collection as offerToken.', 'example_value': '', 'required': True}, 'currency_code': {'type': 'String', 'description': 'The currency code. currency_code can be retrieved from api/v1/meta/getCurrency(Get Currency) endpoint in Hotels collection.', 'example_value': 'AED', 'required': False}}, 'required': ['offerToken']}}\nTarget Parameters Of Target API:\nofferToken:Unique token identifying a flight offer, obtained from flight search endpoints.\nSource API Documentation:\n{'name': 'Get_Min_Price_Multi_Stops', 'endpoint': '/api/v1/flights/getMinPriceMultiStops', 'func_description': 'This API is ideal for travelers planning multi-stop flights. It retrieves the minimum flight prices for specified routes and dates, with options to filter by cabin class. Users input departure/arrival locations and dates for each leg of their journey. The response includes pricing details for different travel dates, helping users compare costs and choose optimal itineraries. Prices can be displayed in various currencies.', 'parameters': {'type': 'object', 'properties': {'legs': {'type': 'String', 'description': \"The legs must contain the fromId, toId and date in object format and must be passed in an array.\\nEXAMPLE:\\n[\\n{\\n'fromId': 'BOM.AIRPORT',\\n'toId': 'AMD.AIRPORT',\\n'date': '2024-05-25'\\n},\\n\u2026\\n]\\nNote: If there are multiple stops, there should be more leg objects in the array.\", 'example_value': \"[{'fromId':'BOM.AIRPORT','toId':'AMD.AIRPORT','date':'2024-05-25'},{'fromId':'AMD.AIRPORT','toId':'BOM.AIRPORT','date':'2024-05-26'}]\", 'required': True}, 'cabinClass': {'type': 'String', 'description': 'Search for flights that match the cabin class specified. Cabin call can be either ECONOMY, PREMIUM_ECONOMY, BUSINESS or FIRST.', 'example_value': 'ECONOMY,PREMIUM_ECONOMY,BUSINESS,FIRST', 'required': False}, 'currency_code': {'type': 'String', 'description': 'The currency code. currency_code can be retrieved from api/v1/meta/getCurrency(Get Currency) endpoint in Hotels collection.', 'example_value': 'AED', 'required': False}}, 'required': ['legs']}}\nList of most likely Source API Resopnse Fields:\n[[{'$[*]': {'departureDate': '2025-05-20', 'returnDate': '2025-05-21', 'searchDates': ['2025-05-20', '2025-05-21'], 'offsetDays': -5, 'accuracyTrackerId': '01kp0_kh0lPPIRVopJAx0KlSJPiyn1JAmIELUpvH9NCuY4SiY3adyjQnJkK8uoJe', 'isCheapest': False, 'price': {'currencyCode': 'USD', 'units': 94, 'nanos': 810000000}, 'priceRounded': {'currencyCode': 'USD', 'units': 95, 'nanos': 0}}}, {'$[*]': {'departureDate': '2025-05-21', 'returnDate': '2025-05-22', 'searchDates': ['2025-05-21', '2025-05-22'], 'offsetDays': -4, 'accuracyTrackerId': '01kp0_kh0lPPIRVopJAx0JpIuffxg44UQYZfQhxoFrrpZ0YuUes_SpyIkdAzNhAF', 'isCheapest': False, 'price': {'currencyCode': 'USD', 'units': 101, 'nanos': 680000000}, 'priceRounded': {'currencyCode': 'USD', 'units': 102, 'nanos': 0}}}]]\nOUTPUT:\n"}]
2025-06-13 19:22:45,403 - logger_Get_Seat_Map - INFO - Get_Min_Price_Multi_Stops---output
:[{'target_api_params': 'offerToken', 'reason': "The 'offerToken' parameter in the target API requires a unique token identifying a flight offer, which is typically obtained from flight search endpoints. However, the provided source API response fields do not contain any field that could serve as an 'offerToken'. The fields listed are related to flight dates, prices, and other metadata but do not include any token or identifier that could be used as an 'offerToken'.", 'source_jsonpath': None, 'confidence': 0, 'dependency_relationship': None}]
2025-06-13 19:22:45,418 - logger_Get_Seat_Map - INFO - messages
:[{"role": "system", "content": "\n#ROLE:\nYou are a professional API Dependency Evaluator. Your task is to analyze whether response fields from source APIs can serve as valid input parameters for a target API.\n\n#INPUT:\n1. Target API Documentation\n2. Target Parameters Of Target API(One input parameter you need to focus on)\n3. Source API Documentation\n4. List of most likely Source API Resopnse Fields\n\n#RULES:\n1. Carefully read the target API documentation to clearly understand the input parameter requirements of the target API, especially the parameter being focused on.\n2. Analyze the response fields of the source API to determine whether there is a business association with the target API parameter(Soft Dependence) or If it is a necessary prerequisite for calling the target API(Hard Dependence).The departure time of the flight is often related to the car rental drop-off time, while the arrival time of the flight is typically associated with the car rental pick-up time.\n3. Based on the context of the source API's response example, determine which specific field of the source API can be used as input for the target parameters of target api.\n4. Pay attention to whether the data type of the API's response field matches the data type of the target API's parameter.However, sometimes even though the data types do not match exactly, the response field of the source API may contain the information required by the target API parameter. For example, a field with the format \"yyy-mm-dd Hh-Mm\" may include the value needed for the pickUpTime parameter (which expects the format \"24-Hour Hh:Mm\"). In such cases, it is important to carefully examine the example values from the response fields to determine if they can be appropriately adapted or extracted for use as input parameters.\n\n#OUTPUT:\n1. Provide a confidence score between 0-100 for each judgment. If the confidence is below 80, set the dependency relationship to null.\n2. Provide reasons. The reasons should first analyze the meanings of the fields and parameters, determine whether the types match, and consider whether there are reasonable scenarios where the output field of the source API could serve as the input parameter of the target API, paying attention to the causal sequence. If no, reasons are given.\n\n\n#Example:\n\nExample1:\nTarget API Documentation:\n{\n\"name\": \"Car_Search\",\n\"func_description\": \"This API is ideal for travelers seeking car rentals at specific locations and times. It searches available vehicles based on pickup/drop-off details, with options to filter by car type, supplier, transmission, and amenities like air conditioning. Users receive detailed rental info including pricing, capacity, features, and supplier ratings. Results can be sorted by recommendation or price, aiding in cost-effective travel planning.\",\n\"parameters\": {\n    \"type\": \"object\",\n    \"properties\": {\n        \"pickUpId\": {\n            \"type\": \"String\",\n            \"description\": \"Pick-up location\nRequired: true\npickUpId can be retrieved from /car/auto-complete endpoint(data->id)\n\",\n            \"example_value\": \"eyJsYXRpdHVkZSI6IjQwLjc1OTU5IiwibG9uZ2l0dWRlIjoiLTczLjk4NDkxIn0=\",\n            \"required\": true\n        },\n        \"pickUpDate\": {\n            \"type\": \"Date (yyyy-mm-dd)\",\n            \"description\": \"Pick-up date\nRequired: true\nFormat: YYYY-MM-DD\nEx: 2024-01-25\",\n            \"example_value\": \"\",\n            \"required\": true\n        },\n        \"pickUpTime\": {\n            \"type\": \"Time (24-Hour Hh:Mm)\",\n            \"description\": \"Pick-up time\nRequired: true\nFormat: HH:MM\nEx: 10:00\",\n            \"example_value\": \"\",\n            \"required\": true\n        },\n        \"dropOffDate\": {\n            \"type\": \"Date (yyyy-mm-dd)\",\n            \"description\": \"Drop-off date\nRequired: true\nFormat: YYYY-MM-DD\nEx: 2024-01-26\",\n            \"example_value\": \"\",\n            \"required\": true\n        },\n        \"dropOffTime\": {\n            \"type\": \"Time (24-Hour Hh:Mm)\",\n            \"description\": \"Drop-off time\nRequired: true\nFormat: HH:MM\nEx: 10:00\",\n            \"example_value\": \"\",\n            \"required\": true\n        },\n    },\n    \"required\": [\n        \"pickUpId\",\n        \"pickUpDate\",\n        \"pickUpTime\",\n        \"dropOffDate\",\n        \"dropOffTime\"\n    ]\n}\nTarget Parameters Of Target API:\n\"pickUpTime\": {\n    \"type\": \"Time (24-Hour Hh:Mm)\",\n    \"description\": \"Pick-up time\nRequired: true\nFormat: HH:MM\nEx: 10:00\",\n    \"example_value\": \"\",\n    \"required\": true\n},\nSource API Documentation:\n{\n    \"name\": \"Search_Flights\",\n    \"endpoint\": \"/api/v1/flights/searchFlights\",\n    \"func_description\": \" \",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"fromId\": {\n                \"type\": \"String\",\n                \"description\": \"From/Departure location Id. fromId can be retrieved from api/v1/flights/searchDestination(Search Flight Location) endpoint in Flights collection as id.\",\n                \"example_value\": \"BOM.AIRPORT\",\n                \"required\": true\n            },\n            \"toId\": {\n                \"type\": \"String\",\n                \"description\": \"To/Arrival location Id. toId can be retrieved from api/v1/flights/searchDestination(Search Flight Location) endpoint in Flights collection as id.\",\n                \"example_value\": \"DEL.AIRPORT\",\n                \"required\": true\n            },\n            \"departDate\": {\n                \"type\": \"Date (yyyy-mm-dd)\",\n                \"description\": \"Departure or travel date.\nFormat: YYYY-MM-DD\",\n                \"example_value\": \"\",\n                \"required\": true\n            }\n        },\n        \"required\": [\n            \"fromId\",\n            \"toId\",\n            \"departDate\"\n        ]\n    }\n}\nList of A Source API Resopnse Field:\n[\n    {\n        \"field_name\": \"$.aggregation.flightTimes[].departure[]\",\n        \"field_example\": \"[\n            {\n                \"start\": \"00:00\",\n                \"end\": \"05:59\",\n                \"count\": 31\n            },\n            {\n                \"start\": \"06:00\",\n                \"end\": \"11:59\",\n                \"count\": 61\n            },\n            {\n                \"start\": \"12:00\",\n                \"end\": \"17:59\",\n                \"count\": 54\n            }\n        ]\n    },\n    {\n        \"field_name\": \"$.flightOffers[].segments[].legs[]\",\n        \"field_example\": \"[\n            {\n                \"departureTime\": \"2025-06-15T06:00:00\",\n                \"arrivalTime\": \"2025-06-15T07:55:00\",\n                \"legs\": [\n                    {\n                        \"departureTime\": \"2025-06-15T06:00:00\",\n                        \"arrivalTime\": \"2025-06-15T07:55:00\",\n                        \"departureAirport\": {\n                            \"type\": \"AIRPORT\",\n                            \"code\": \"BOM\",\n                            \"name\": \"Chhatrapati Shivaji International Airport Mumbai\",\n                            \"city\": \"BOM\",\n                            \"cityName\": \"Mumbai\",\n                            \"country\": \"IN\",\n                            \"countryName\": \"India\",\n                            \"province\": \"Maharashtra\"\n                        },\n                        \"arrivalAirport\": {\n                            \"type\": \"AIRPORT\",\n                            \"code\": \"DEL\",\n                            \"name\": \"Delhi International Airport\",\n                            \"city\": \"DEL\",\n                            \"cityName\": \"New Delhi\",\n                            \"country\": \"IN\",\n                            \"countryName\": \"India\"\n                        },\n                    }\n                ]\n            }\n        ]\" \n    }\n    \n]\nOutput:\n[\n    {\n        \"reason\": \"The 'pickUpTime' parameter in the target API requires a specific car rental return time (24-hour format). The source API's 'arrivalTime' field in flight segments provides exact arrival timestamps (e.g., '2025-06-15T07:55:00'). While the data types differ (timestamp vs time), the time portion can be extracted. This creates a potential business association where a traveler wants to rent a car two hours after the flight arrives.,\n        \"jsonpath\": \"$.flightOffers[].segments[].legs[].arrivalTime\",\n        \"confidence\": 90,\n        \"dependency_relationship\": \"Soft Dependency(Business-association)\"\n    },\n    {\n        \"reason\": \"The 'departure[]' time ranges represent when flights take off, which is irrelevant for determining car rental drop-off times. Even if considering a scenario where someone rents a car before departure (which contradicts the target API's purpose), these are still aggregated ranges rather than specific flight times.\",\n        \"jsonpath\": \"$.aggregation.flightTimes[].departure[]\",\n        \"confidence\": 10,\n        \"dependency_relationship\": null\n    }\n]\n\n\n#OUTPUT JSON FORMAT:\n[\n    {\n        \"target_api_params\": <<target_api_params_name>>,\n        \"reason\": <<reason>>,\n        \"source_jsonpath\": <<jsonpath>>,\n        \"confidence\": <<0-100>>,\n        \"dependency_relationship\": <<Soft Dependency(Business-association) or Hard Dependency(Prerequisite API) or null>>,\n    }\n]\n\n"}, {"role": "user", "content": "\nTarget API Documentation:\n{'name': 'Get_Seat_Map', 'endpoint': '/api/v1/flights/getSeatMap', 'func_description': None, 'parameters': {'type': 'object', 'properties': {'offerToken': {'type': 'String', 'description': 'offerToken can be retrieved from api/v1/flights/searchFlights(Search Flights) or api/v1/flights/searchFlightsMultiStops(Search Flights Multi Stops) endpoints in Flights collection as offerToken.', 'example_value': '', 'required': True}, 'currency_code': {'type': 'String', 'description': 'The currency code. currency_code can be retrieved from api/v1/meta/getCurrency(Get Currency) endpoint in Hotels collection.', 'example_value': 'AED', 'required': False}}, 'required': ['offerToken']}}\nTarget Parameters Of Target API:\nofferToken:Unique token identifying a flight offer, obtained from flight search endpoints.\nSource API Documentation:\n{'name': 'Get_Min_Price', 'endpoint': '/api/v1/flights/getMinPrice', 'func_description': 'This API is ideal for travelers comparing flight prices for budget planning. It retrieves the minimum flight price between specified departure and arrival locations for given dates, with optional cabin class filtering. The response includes detailed pricing information, rounded costs, and tracking identifiers. Users can identify the most economical travel dates and plan accordingly. Location IDs must be obtained from the SearchDestination API.', 'parameters': {'type': 'object', 'properties': {'fromId': {'type': 'String', 'description': 'From/Departure location Id. fromId can be retrieved from api/v1/flights/searchDestination(Search Flight Location) endpoint in Flights collection as id.', 'example_value': 'BOM.AIRPORT', 'required': True}, 'toId': {'type': 'String', 'description': 'To/Arrival location Id. toId can be retrieved from api/v1/flights/searchDestination(Search Flight Location) endpoint in Flights collection as id.', 'example_value': 'DEL.AIRPORT', 'required': True}, 'departDate': {'type': 'Date (yyyy-mm-dd)', 'description': 'Departure or travel date.\\nFormat: YYYY-MM-DD', 'example_value': '', 'required': True}, 'returnDate': {'type': 'Date (yyyy-mm-dd)', 'description': 'Return date.\\nFormat: YYYY-MM-DD', 'example_value': '', 'required': False}, 'cabinClass': {'type': 'Enum', 'description': 'Search for flights that match the cabin class specified. Cabin call can be either ECONOMY, PREMIUM_ECONOMY, BUSINESS or FIRST.', 'example_value': '', 'required': False}, 'currency_code': {'type': 'String', 'description': 'The currency code. currency_code can be retrieved from api/v1/meta/getCurrency(Get Currency) endpoint in Hotels collection.', 'example_value': 'AED', 'required': False}}, 'required': ['fromId', 'toId', 'departDate']}}\nList of most likely Source API Resopnse Fields:\n[[{'$[*]': {'departureDate': '2025-06-10', 'searchDates': ['2025-06-10'], 'offsetDays': -5, 'accuracyTrackerId': '01kp0_kh0lPPIRVopJAx0O_YlYXDsel5E41QYsK-dW6uY4SiY3adyjQnJkK8uoJe', 'isCheapest': False, 'price': {'currencyCode': 'USD', 'units': 65, 'nanos': 180000000}, 'priceRounded': {'currencyCode': 'USD', 'units': 66, 'nanos': 0}}}, {'$[*]': {'departureDate': '2025-06-11', 'searchDates': ['2025-06-11'], 'offsetDays': -4, 'accuracyTrackerId': '01kp0_kh0lPPIRVopJAx0LTl6AUql_syfcTAMjzHiKKuY4SiY3adyjQnJkK8uoJe', 'isCheapest': True, 'price': {'currencyCode': 'USD', 'units': 64, 'nanos': 390000000}, 'priceRounded': {'currencyCode': 'USD', 'units': 65, 'nanos': 0}}}]]\nOUTPUT:\n"}]
2025-06-13 19:22:53,146 - logger_Get_Seat_Map - INFO - Get_Min_Price---output
:[{'target_api_params': 'offerToken', 'reason': "The 'offerToken' parameter in the target API requires a unique token identifying a flight offer, which is typically obtained from flight search endpoints. The source API 'Get_Min_Price' does not provide any field that contains or resembles an 'offerToken'. The response fields from the source API include pricing information and tracking identifiers, but none of these can serve as an 'offerToken' for the target API.", 'source_jsonpath': None, 'confidence': 0, 'dependency_relationship': None}]
2025-06-13 19:22:53,161 - logger_Get_Seat_Map - INFO - messages
:[{"role": "system", "content": "\n#ROLE:\nYou are a professional API Dependency Evaluator. Your task is to analyze whether response fields from source APIs can serve as valid input parameters for a target API.\n\n#INPUT:\n1. Target API Documentation\n2. Target Parameters Of Target API(One input parameter you need to focus on)\n3. Source API Documentation\n4. List of most likely Source API Resopnse Fields\n\n#RULES:\n1. Carefully read the target API documentation to clearly understand the input parameter requirements of the target API, especially the parameter being focused on.\n2. Analyze the response fields of the source API to determine whether there is a business association with the target API parameter(Soft Dependence) or If it is a necessary prerequisite for calling the target API(Hard Dependence).The departure time of the flight is often related to the car rental drop-off time, while the arrival time of the flight is typically associated with the car rental pick-up time.\n3. Based on the context of the source API's response example, determine which specific field of the source API can be used as input for the target parameters of target api.\n4. Pay attention to whether the data type of the API's response field matches the data type of the target API's parameter.However, sometimes even though the data types do not match exactly, the response field of the source API may contain the information required by the target API parameter. For example, a field with the format \"yyy-mm-dd Hh-Mm\" may include the value needed for the pickUpTime parameter (which expects the format \"24-Hour Hh:Mm\"). In such cases, it is important to carefully examine the example values from the response fields to determine if they can be appropriately adapted or extracted for use as input parameters.\n\n#OUTPUT:\n1. Provide a confidence score between 0-100 for each judgment. If the confidence is below 80, set the dependency relationship to null.\n2. Provide reasons. The reasons should first analyze the meanings of the fields and parameters, determine whether the types match, and consider whether there are reasonable scenarios where the output field of the source API could serve as the input parameter of the target API, paying attention to the causal sequence. If no, reasons are given.\n\n\n#Example:\n\nExample1:\nTarget API Documentation:\n{\n\"name\": \"Car_Search\",\n\"func_description\": \"This API is ideal for travelers seeking car rentals at specific locations and times. It searches available vehicles based on pickup/drop-off details, with options to filter by car type, supplier, transmission, and amenities like air conditioning. Users receive detailed rental info including pricing, capacity, features, and supplier ratings. Results can be sorted by recommendation or price, aiding in cost-effective travel planning.\",\n\"parameters\": {\n    \"type\": \"object\",\n    \"properties\": {\n        \"pickUpId\": {\n            \"type\": \"String\",\n            \"description\": \"Pick-up location\nRequired: true\npickUpId can be retrieved from /car/auto-complete endpoint(data->id)\n\",\n            \"example_value\": \"eyJsYXRpdHVkZSI6IjQwLjc1OTU5IiwibG9uZ2l0dWRlIjoiLTczLjk4NDkxIn0=\",\n            \"required\": true\n        },\n        \"pickUpDate\": {\n            \"type\": \"Date (yyyy-mm-dd)\",\n            \"description\": \"Pick-up date\nRequired: true\nFormat: YYYY-MM-DD\nEx: 2024-01-25\",\n            \"example_value\": \"\",\n            \"required\": true\n        },\n        \"pickUpTime\": {\n            \"type\": \"Time (24-Hour Hh:Mm)\",\n            \"description\": \"Pick-up time\nRequired: true\nFormat: HH:MM\nEx: 10:00\",\n            \"example_value\": \"\",\n            \"required\": true\n        },\n        \"dropOffDate\": {\n            \"type\": \"Date (yyyy-mm-dd)\",\n            \"description\": \"Drop-off date\nRequired: true\nFormat: YYYY-MM-DD\nEx: 2024-01-26\",\n            \"example_value\": \"\",\n            \"required\": true\n        },\n        \"dropOffTime\": {\n            \"type\": \"Time (24-Hour Hh:Mm)\",\n            \"description\": \"Drop-off time\nRequired: true\nFormat: HH:MM\nEx: 10:00\",\n            \"example_value\": \"\",\n            \"required\": true\n        },\n    },\n    \"required\": [\n        \"pickUpId\",\n        \"pickUpDate\",\n        \"pickUpTime\",\n        \"dropOffDate\",\n        \"dropOffTime\"\n    ]\n}\nTarget Parameters Of Target API:\n\"pickUpTime\": {\n    \"type\": \"Time (24-Hour Hh:Mm)\",\n    \"description\": \"Pick-up time\nRequired: true\nFormat: HH:MM\nEx: 10:00\",\n    \"example_value\": \"\",\n    \"required\": true\n},\nSource API Documentation:\n{\n    \"name\": \"Search_Flights\",\n    \"endpoint\": \"/api/v1/flights/searchFlights\",\n    \"func_description\": \" \",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"fromId\": {\n                \"type\": \"String\",\n                \"description\": \"From/Departure location Id. fromId can be retrieved from api/v1/flights/searchDestination(Search Flight Location) endpoint in Flights collection as id.\",\n                \"example_value\": \"BOM.AIRPORT\",\n                \"required\": true\n            },\n            \"toId\": {\n                \"type\": \"String\",\n                \"description\": \"To/Arrival location Id. toId can be retrieved from api/v1/flights/searchDestination(Search Flight Location) endpoint in Flights collection as id.\",\n                \"example_value\": \"DEL.AIRPORT\",\n                \"required\": true\n            },\n            \"departDate\": {\n                \"type\": \"Date (yyyy-mm-dd)\",\n                \"description\": \"Departure or travel date.\nFormat: YYYY-MM-DD\",\n                \"example_value\": \"\",\n                \"required\": true\n            }\n        },\n        \"required\": [\n            \"fromId\",\n            \"toId\",\n            \"departDate\"\n        ]\n    }\n}\nList of A Source API Resopnse Field:\n[\n    {\n        \"field_name\": \"$.aggregation.flightTimes[].departure[]\",\n        \"field_example\": \"[\n            {\n                \"start\": \"00:00\",\n                \"end\": \"05:59\",\n                \"count\": 31\n            },\n            {\n                \"start\": \"06:00\",\n                \"end\": \"11:59\",\n                \"count\": 61\n            },\n            {\n                \"start\": \"12:00\",\n                \"end\": \"17:59\",\n                \"count\": 54\n            }\n        ]\n    },\n    {\n        \"field_name\": \"$.flightOffers[].segments[].legs[]\",\n        \"field_example\": \"[\n            {\n                \"departureTime\": \"2025-06-15T06:00:00\",\n                \"arrivalTime\": \"2025-06-15T07:55:00\",\n                \"legs\": [\n                    {\n                        \"departureTime\": \"2025-06-15T06:00:00\",\n                        \"arrivalTime\": \"2025-06-15T07:55:00\",\n                        \"departureAirport\": {\n                            \"type\": \"AIRPORT\",\n                            \"code\": \"BOM\",\n                            \"name\": \"Chhatrapati Shivaji International Airport Mumbai\",\n                            \"city\": \"BOM\",\n                            \"cityName\": \"Mumbai\",\n                            \"country\": \"IN\",\n                            \"countryName\": \"India\",\n                            \"province\": \"Maharashtra\"\n                        },\n                        \"arrivalAirport\": {\n                            \"type\": \"AIRPORT\",\n                            \"code\": \"DEL\",\n                            \"name\": \"Delhi International Airport\",\n                            \"city\": \"DEL\",\n                            \"cityName\": \"New Delhi\",\n                            \"country\": \"IN\",\n                            \"countryName\": \"India\"\n                        },\n                    }\n                ]\n            }\n        ]\" \n    }\n    \n]\nOutput:\n[\n    {\n        \"reason\": \"The 'pickUpTime' parameter in the target API requires a specific car rental return time (24-hour format). The source API's 'arrivalTime' field in flight segments provides exact arrival timestamps (e.g., '2025-06-15T07:55:00'). While the data types differ (timestamp vs time), the time portion can be extracted. This creates a potential business association where a traveler wants to rent a car two hours after the flight arrives.,\n        \"jsonpath\": \"$.flightOffers[].segments[].legs[].arrivalTime\",\n        \"confidence\": 90,\n        \"dependency_relationship\": \"Soft Dependency(Business-association)\"\n    },\n    {\n        \"reason\": \"The 'departure[]' time ranges represent when flights take off, which is irrelevant for determining car rental drop-off times. Even if considering a scenario where someone rents a car before departure (which contradicts the target API's purpose), these are still aggregated ranges rather than specific flight times.\",\n        \"jsonpath\": \"$.aggregation.flightTimes[].departure[]\",\n        \"confidence\": 10,\n        \"dependency_relationship\": null\n    }\n]\n\n\n#OUTPUT JSON FORMAT:\n[\n    {\n        \"target_api_params\": <<target_api_params_name>>,\n        \"reason\": <<reason>>,\n        \"source_jsonpath\": <<jsonpath>>,\n        \"confidence\": <<0-100>>,\n        \"dependency_relationship\": <<Soft Dependency(Business-association) or Hard Dependency(Prerequisite API) or null>>,\n    }\n]\n\n"}, {"role": "user", "content": "\nTarget API Documentation:\n{'name': 'Get_Seat_Map', 'endpoint': '/api/v1/flights/getSeatMap', 'func_description': None, 'parameters': {'type': 'object', 'properties': {'offerToken': {'type': 'String', 'description': 'offerToken can be retrieved from api/v1/flights/searchFlights(Search Flights) or api/v1/flights/searchFlightsMultiStops(Search Flights Multi Stops) endpoints in Flights collection as offerToken.', 'example_value': '', 'required': True}, 'currency_code': {'type': 'String', 'description': 'The currency code. currency_code can be retrieved from api/v1/meta/getCurrency(Get Currency) endpoint in Hotels collection.', 'example_value': 'AED', 'required': False}}, 'required': ['offerToken']}}\nTarget Parameters Of Target API:\nofferToken:Unique token identifying a flight offer, obtained from flight search endpoints.\nSource API Documentation:\n{'name': 'Get_Availability', 'endpoint': '/api/v1/attraction/getAvailability', 'func_description': \"This API is ideal for checking event availability and pricing details for activities like pub crawls. It retrieves booking options, pricing (including group discounts), cancellation policies, and language preferences based on the activity's slug and date. The response includes ticket availability, pricing per person, and booking limits, helping users plan their participation in guided tours or events. The slug must be obtained from the SearchLocation API.\", 'parameters': {'type': 'object', 'properties': {'slug': {'type': 'String', 'description': 'slug can be retrieved from api/v1/attraction/searchLocation(Search Attraction Location) endpoint in Attraction collection as productSlug  inside products or destinations.', 'example_value': 'prg6h2lj9jfx-city-pub-crawl-with-drinks', 'required': True}, 'date': {'type': 'Date (yyyy-mm-dd)', 'description': 'The availability of the data.', 'example_value': '', 'required': False}, 'currency_code': {'type': 'String', 'description': 'The currency code. currency_code can be retrieved from api/v1/meta/getCurrency(Get Currency) endpoint in Hotels collection.', 'example_value': 'EUR', 'required': False}, 'languagecode': {'type': 'String', 'description': 'To obtain the response data in a specific language, enter the languagecode. languagecode can be retrieved from api/v1/meta/getLanguages(Get Languages\\n) endpoint in Meta collection.', 'example_value': 'fr', 'required': False}}, 'required': ['slug']}}\nList of most likely Source API Resopnse Fields:\n[[{'$[*].timeSlotOffers[*]': {'__typename': 'AttractionTimeSlotOffer', 'languageOptions': [{'__typename': 'OfferLanguageOption', 'label': 'Hindi - Tour guide', 'language': 'hi', 'type': 'guide'}, {'__typename': 'OfferLanguageOption', 'label': 'English - Tour guide', 'language': 'en', 'type': 'guide'}], 'additionalInfo': None, 'benefits': {'__typename': 'Benefits', 'freeAudioGuide': None, 'freeDrink': None, 'freeTransportation': None, 'inStoreDiscount': None, 'priorityLane': None, 'skipTheLine': None}, 'description': None, 'id': 'OFfiWXve5anX', 'items': [{'__typename': 'AttractionTimeSlotOfferItem', 'cancellationPolicy': {'__typename': 'AttractionsCancellationPolicy', 'comparedTo': 'start', 'hasFreeCancellation': True, 'isStillRefundable': True, 'percentage': 100, 'period': 'P1D'}, 'constraint': {'__typename': 'Constraint', 'label': '(age 16-65)', 'maxGroupSize': None, 'minGroupSize': None}, 'id': 'ATO-e90b3d37-72e8-4b12-86e5-9c006d325a12_PRg6H2LJ9JFX_20250525_1900', 'offerItemId': 'OI5K8mlrnLPy', 'type': 'adult', 'tieredPricing': True, 'price': {'__typename': 'AttractionsPrice', 'chargeAmount': 52.24, 'currency': 'EUR', 'publicAmount': 52.24}, 'convertedPrice': {'__typename': 'AttractionsPrice', 'chargeAmount': 58.44, 'currency': 'USD', 'publicAmount': 58.44}, 'languageOption': {'__typename': 'LanguageOption', 'language': 'hi', 'type': 'guide'}, 'travelerCountRequired': None, 'ticketsAvailable': 10000, 'maxPerReservation': 1, 'minPerReservation': 1, 'duration': None, 'label': 'Adult'}, {'__typename': 'AttractionTimeSlotOfferItem', 'cancellationPolicy': {'__typename': 'AttractionsCancellationPolicy', 'comparedTo': 'start', 'hasFreeCancellation': True, 'isStillRefundable': True, 'percentage': 100, 'period': 'P1D'}, 'constraint': {'__typename': 'Constraint', 'label': '(age 16-65)', 'maxGroupSize': None, 'minGroupSize': None}, 'id': 'ATO-666dda19-4650-42b8-bde9-729dd9bce2c5_PRg6H2LJ9JFX_20250525_1900', 'offerItemId': 'OI5K8mlrnLPy', 'type': 'adult', 'tieredPricing': True, 'price': {'__typename': 'AttractionsPrice', 'chargeAmount': 52.24, 'currency': 'EUR', 'publicAmount': 52.24}, 'convertedPrice': {'__typename': 'AttractionsPrice', 'chargeAmount': 58.44, 'currency': 'USD', 'publicAmount': 58.44}, 'languageOption': {'__typename': 'LanguageOption', 'language': 'en', 'type': 'guide'}, 'travelerCountRequired': None, 'ticketsAvailable': 10000, 'maxPerReservation': 1, 'minPerReservation': 1, 'duration': None, 'label': 'Adult'}], 'label': 'South Bombay Pub Crawl', 'locationInstructions': None, 'notIncluded': None, 'reservationRestrictions': {'__typename': 'ReservationRestrictions', 'adultRequiredForReservation': True, 'maxOfferItemsPerReservation': 15, 'minOfferItemsPerReservation': 1}, 'typicalDuration': None, 'whatsIncluded': None}}]]\nOUTPUT:\n"}]
2025-06-13 19:23:00,045 - logger_Get_Seat_Map - INFO - Get_Availability---output
:[{'target_api_params': 'offerToken', 'reason': "The 'offerToken' parameter in the target API requires a unique token identifying a flight offer, which is obtained from flight search endpoints. The source API is related to attraction availability and does not provide any flight-related information or tokens. There is no business or functional association between the source API's response fields and the target API's 'offerToken' parameter.", 'source_jsonpath': None, 'confidence': 0, 'dependency_relationship': None}]
2025-06-13 19:23:00,060 - logger_Get_Seat_Map - INFO - messages
:[{"role": "system", "content": "\n#ROLE:\nYou are a professional API Dependency Evaluator. Your task is to analyze whether response fields from source APIs can serve as valid input parameters for a target API.\n\n#INPUT:\n1. Target API Documentation\n2. Target Parameters Of Target API(One input parameter you need to focus on)\n3. Source API Documentation\n4. List of most likely Source API Resopnse Fields\n\n#RULES:\n1. Carefully read the target API documentation to clearly understand the input parameter requirements of the target API, especially the parameter being focused on.\n2. Analyze the response fields of the source API to determine whether there is a business association with the target API parameter(Soft Dependence) or If it is a necessary prerequisite for calling the target API(Hard Dependence).The departure time of the flight is often related to the car rental drop-off time, while the arrival time of the flight is typically associated with the car rental pick-up time.\n3. Based on the context of the source API's response example, determine which specific field of the source API can be used as input for the target parameters of target api.\n4. Pay attention to whether the data type of the API's response field matches the data type of the target API's parameter.However, sometimes even though the data types do not match exactly, the response field of the source API may contain the information required by the target API parameter. For example, a field with the format \"yyy-mm-dd Hh-Mm\" may include the value needed for the pickUpTime parameter (which expects the format \"24-Hour Hh:Mm\"). In such cases, it is important to carefully examine the example values from the response fields to determine if they can be appropriately adapted or extracted for use as input parameters.\n\n#OUTPUT:\n1. Provide a confidence score between 0-100 for each judgment. If the confidence is below 80, set the dependency relationship to null.\n2. Provide reasons. The reasons should first analyze the meanings of the fields and parameters, determine whether the types match, and consider whether there are reasonable scenarios where the output field of the source API could serve as the input parameter of the target API, paying attention to the causal sequence. If no, reasons are given.\n\n\n#Example:\n\nExample1:\nTarget API Documentation:\n{\n\"name\": \"Car_Search\",\n\"func_description\": \"This API is ideal for travelers seeking car rentals at specific locations and times. It searches available vehicles based on pickup/drop-off details, with options to filter by car type, supplier, transmission, and amenities like air conditioning. Users receive detailed rental info including pricing, capacity, features, and supplier ratings. Results can be sorted by recommendation or price, aiding in cost-effective travel planning.\",\n\"parameters\": {\n    \"type\": \"object\",\n    \"properties\": {\n        \"pickUpId\": {\n            \"type\": \"String\",\n            \"description\": \"Pick-up location\nRequired: true\npickUpId can be retrieved from /car/auto-complete endpoint(data->id)\n\",\n            \"example_value\": \"eyJsYXRpdHVkZSI6IjQwLjc1OTU5IiwibG9uZ2l0dWRlIjoiLTczLjk4NDkxIn0=\",\n            \"required\": true\n        },\n        \"pickUpDate\": {\n            \"type\": \"Date (yyyy-mm-dd)\",\n            \"description\": \"Pick-up date\nRequired: true\nFormat: YYYY-MM-DD\nEx: 2024-01-25\",\n            \"example_value\": \"\",\n            \"required\": true\n        },\n        \"pickUpTime\": {\n            \"type\": \"Time (24-Hour Hh:Mm)\",\n            \"description\": \"Pick-up time\nRequired: true\nFormat: HH:MM\nEx: 10:00\",\n            \"example_value\": \"\",\n            \"required\": true\n        },\n        \"dropOffDate\": {\n            \"type\": \"Date (yyyy-mm-dd)\",\n            \"description\": \"Drop-off date\nRequired: true\nFormat: YYYY-MM-DD\nEx: 2024-01-26\",\n            \"example_value\": \"\",\n            \"required\": true\n        },\n        \"dropOffTime\": {\n            \"type\": \"Time (24-Hour Hh:Mm)\",\n            \"description\": \"Drop-off time\nRequired: true\nFormat: HH:MM\nEx: 10:00\",\n            \"example_value\": \"\",\n            \"required\": true\n        },\n    },\n    \"required\": [\n        \"pickUpId\",\n        \"pickUpDate\",\n        \"pickUpTime\",\n        \"dropOffDate\",\n        \"dropOffTime\"\n    ]\n}\nTarget Parameters Of Target API:\n\"pickUpTime\": {\n    \"type\": \"Time (24-Hour Hh:Mm)\",\n    \"description\": \"Pick-up time\nRequired: true\nFormat: HH:MM\nEx: 10:00\",\n    \"example_value\": \"\",\n    \"required\": true\n},\nSource API Documentation:\n{\n    \"name\": \"Search_Flights\",\n    \"endpoint\": \"/api/v1/flights/searchFlights\",\n    \"func_description\": \" \",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"fromId\": {\n                \"type\": \"String\",\n                \"description\": \"From/Departure location Id. fromId can be retrieved from api/v1/flights/searchDestination(Search Flight Location) endpoint in Flights collection as id.\",\n                \"example_value\": \"BOM.AIRPORT\",\n                \"required\": true\n            },\n            \"toId\": {\n                \"type\": \"String\",\n                \"description\": \"To/Arrival location Id. toId can be retrieved from api/v1/flights/searchDestination(Search Flight Location) endpoint in Flights collection as id.\",\n                \"example_value\": \"DEL.AIRPORT\",\n                \"required\": true\n            },\n            \"departDate\": {\n                \"type\": \"Date (yyyy-mm-dd)\",\n                \"description\": \"Departure or travel date.\nFormat: YYYY-MM-DD\",\n                \"example_value\": \"\",\n                \"required\": true\n            }\n        },\n        \"required\": [\n            \"fromId\",\n            \"toId\",\n            \"departDate\"\n        ]\n    }\n}\nList of A Source API Resopnse Field:\n[\n    {\n        \"field_name\": \"$.aggregation.flightTimes[].departure[]\",\n        \"field_example\": \"[\n            {\n                \"start\": \"00:00\",\n                \"end\": \"05:59\",\n                \"count\": 31\n            },\n            {\n                \"start\": \"06:00\",\n                \"end\": \"11:59\",\n                \"count\": 61\n            },\n            {\n                \"start\": \"12:00\",\n                \"end\": \"17:59\",\n                \"count\": 54\n            }\n        ]\n    },\n    {\n        \"field_name\": \"$.flightOffers[].segments[].legs[]\",\n        \"field_example\": \"[\n            {\n                \"departureTime\": \"2025-06-15T06:00:00\",\n                \"arrivalTime\": \"2025-06-15T07:55:00\",\n                \"legs\": [\n                    {\n                        \"departureTime\": \"2025-06-15T06:00:00\",\n                        \"arrivalTime\": \"2025-06-15T07:55:00\",\n                        \"departureAirport\": {\n                            \"type\": \"AIRPORT\",\n                            \"code\": \"BOM\",\n                            \"name\": \"Chhatrapati Shivaji International Airport Mumbai\",\n                            \"city\": \"BOM\",\n                            \"cityName\": \"Mumbai\",\n                            \"country\": \"IN\",\n                            \"countryName\": \"India\",\n                            \"province\": \"Maharashtra\"\n                        },\n                        \"arrivalAirport\": {\n                            \"type\": \"AIRPORT\",\n                            \"code\": \"DEL\",\n                            \"name\": \"Delhi International Airport\",\n                            \"city\": \"DEL\",\n                            \"cityName\": \"New Delhi\",\n                            \"country\": \"IN\",\n                            \"countryName\": \"India\"\n                        },\n                    }\n                ]\n            }\n        ]\" \n    }\n    \n]\nOutput:\n[\n    {\n        \"reason\": \"The 'pickUpTime' parameter in the target API requires a specific car rental return time (24-hour format). The source API's 'arrivalTime' field in flight segments provides exact arrival timestamps (e.g., '2025-06-15T07:55:00'). While the data types differ (timestamp vs time), the time portion can be extracted. This creates a potential business association where a traveler wants to rent a car two hours after the flight arrives.,\n        \"jsonpath\": \"$.flightOffers[].segments[].legs[].arrivalTime\",\n        \"confidence\": 90,\n        \"dependency_relationship\": \"Soft Dependency(Business-association)\"\n    },\n    {\n        \"reason\": \"The 'departure[]' time ranges represent when flights take off, which is irrelevant for determining car rental drop-off times. Even if considering a scenario where someone rents a car before departure (which contradicts the target API's purpose), these are still aggregated ranges rather than specific flight times.\",\n        \"jsonpath\": \"$.aggregation.flightTimes[].departure[]\",\n        \"confidence\": 10,\n        \"dependency_relationship\": null\n    }\n]\n\n\n#OUTPUT JSON FORMAT:\n[\n    {\n        \"target_api_params\": <<target_api_params_name>>,\n        \"reason\": <<reason>>,\n        \"source_jsonpath\": <<jsonpath>>,\n        \"confidence\": <<0-100>>,\n        \"dependency_relationship\": <<Soft Dependency(Business-association) or Hard Dependency(Prerequisite API) or null>>,\n    }\n]\n\n"}, {"role": "user", "content": "\nTarget API Documentation:\n{'name': 'Get_Seat_Map', 'endpoint': '/api/v1/flights/getSeatMap', 'func_description': None, 'parameters': {'type': 'object', 'properties': {'offerToken': {'type': 'String', 'description': 'offerToken can be retrieved from api/v1/flights/searchFlights(Search Flights) or api/v1/flights/searchFlightsMultiStops(Search Flights Multi Stops) endpoints in Flights collection as offerToken.', 'example_value': '', 'required': True}, 'currency_code': {'type': 'String', 'description': 'The currency code. currency_code can be retrieved from api/v1/meta/getCurrency(Get Currency) endpoint in Hotels collection.', 'example_value': 'AED', 'required': False}}, 'required': ['offerToken']}}\nTarget Parameters Of Target API:\nofferToken:Unique token identifying a flight offer, obtained from flight search endpoints.\nSource API Documentation:\n{'name': 'Search_Attractions', 'endpoint': '/api/v1/attraction/searchAttractions', 'func_description': 'This API is ideal for travelers planning activities in a specific location. It retrieves bookable attractions based on a location ID, with options to sort by popularity, rating, or price. Users can filter by date, price range, activity type, and more. The response includes detailed attraction information like pricing, ratings, reviews, and cancellation policies, helping users make informed booking decisions. The location ID must be obtained from the SearchLocation API.', 'parameters': {'type': 'object', 'properties': {'id': {'type': 'String', 'description': 'id can be retrieved from api/v1/attraction/searchLocation(Search Attraction Location) endpoint in Attraction collection as id inside products or destinations.', 'example_value': 'eyJ1ZmkiOi0yMDkyMTc0fQ==', 'required': True}, 'startDate': {'type': 'Date (yyyy-mm-dd)', 'description': 'Sort the data by the start date.', 'example_value': '', 'required': False}, 'endDate': {'type': 'Date (yyyy-mm-dd)', 'description': 'Sort the data by the end date.', 'example_value': '', 'required': False}, 'sortBy': {'type': 'Enum', 'description': 'This parameter orders result by trending, attr_book_score or lowest_price.', 'example_value': '', 'required': False}, 'page': {'type': 'Number', 'description': 'The page number.', 'example_value': '1', 'required': False}, 'currency_code': {'type': 'String', 'description': 'The currency code. currency_code can be retrieved from api/v1/meta/getCurrency(Get Currency) endpoint in Hotels collection.', 'example_value': 'INR', 'required': False}, 'languagecode': {'type': 'String', 'description': 'To obtain the response data in a specific language, enter the languagecode. languagecode can be retrieved from api/v1/meta/getLanguages(Get Languages\\n) endpoint in Meta collection.', 'example_value': 'en-us', 'required': False}, 'typeFilters': {'type': 'String', 'description': 'typeFilters can be retrieved from /api/v1/attraction/searchAttractions(Search Attractions) endpoint in Hotels collection. data->filterOptions-> typeFilters[]-> tagname.\\nNote:- typeFilters should be separated by commas if passing multiple values.\\nExample: tag1,tag2,tag', 'example_value': '', 'required': False}, 'priceFilters': {'type': 'String', 'description': 'priceFilters can be retrieved from /api/v1/attraction/searchAttractions(Search Attractions) endpoint in Hotels collection. data->filterOptions-> priceFilters[]-> tagname.\\nNote:- priceFilters should be separated by commas if passing multiple values.\\nExample: tag1,tag2,tag', 'example_value': '', 'required': False}, 'ufiFilters': {'type': 'String', 'description': 'ufiFilters can be retrieved from /api/v1/attraction/searchAttractions(Search Attractions) endpoint in Hotels collection. data->filterOptions-> ufiFilters[]-> tagname.\\nNote:- ufiFilters should be separated by commas if passing multiple values.\\nExample: tag1,tag2,tag', 'example_value': '', 'required': False}, 'labelFilters': {'type': 'String', 'description': 'labelFilters can be retrieved from /api/v1/attraction/searchAttractions(Search Attractions) endpoint in Hotels collection. data->filterOptions-> labelFilters[]-> tagname.\\nNote:- labelFilters should be separated by commas if passing multiple values.\\nExample: tag1,tag2,tag', 'example_value': '', 'required': False}}, 'required': ['id']}}\nList of most likely Source API Resopnse Fields:\n[[{'$.products[*].offers[*]': {'__typename': 'Offer', 'items': [{'__typename': 'OfferItem', 'id': 'OIEnoHP8TJsB'}]}}, {'$.products[*].offers[*]': {'__typename': 'Offer', 'items': [{'__typename': 'OfferItem', 'id': 'OIMyfydyr7zh'}]}}, {'$.products[*].offers[*]': {'__typename': 'Offer', 'items': [{'__typename': 'OfferItem', 'id': 'OIgp8x8LtoSZ'}, {'__typename': 'OfferItem', 'id': 'OIa9JX52Lohp'}]}}, {'$.products[*].offers[*]': {'__typename': 'Offer', 'items': [{'__typename': 'OfferItem', 'id': 'OIYlfvZ2kjTn'}, {'__typename': 'OfferItem', 'id': 'OINiYOtvrh79'}]}}]]\nOUTPUT:\n"}]
2025-06-13 19:23:07,499 - logger_Get_Seat_Map - INFO - Search_Attractions---output
:[{'target_api_params': 'offerToken', 'reason': "The 'offerToken' parameter in the target API is a unique token identifying a flight offer, which is obtained from flight search endpoints. The source API is for searching attractions and does not provide any flight-related information or tokens. There is no business or logical association between the source API's response fields and the target API's 'offerToken' parameter.", 'source_jsonpath': '$.products[*].offers[*]', 'confidence': 0, 'dependency_relationship': None}]
